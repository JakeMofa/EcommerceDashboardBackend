import { Brand_status, PrismaClient } from '../../prisma/commerce/generated/vendoCommerce';

const prisma = new PrismaClient();

async function main() {
  const users = await prisma.users.findMany();

  for (const { id, ...user } of users) {
    const {
      u_amazon_seller_name,
      u_amazon_marketplace_name,
      allowed_user_id,
      u_cust_id,
      u_card_last_no,
      access_token,
      password_reset_token,
      auth_key,
      u_refunded,
      u_canceled,
      u_payment,
      u_mws_seller_id,
      u_mws_auth_token,
      u_mws_status,
      u_is_logged,
      u_is_auto_logout,
      u_aff_username,
      u_aff_password,
      u_affiliate_id,
      u_affiliate_status,
      u_sub_plan,
      u_refer_date,
      db_name,
      u_db_server,
      u_db_username,
      u_db_password,
      u_enterprise_id,
      u_first_google_sheet_name,
      u_second_google_sheet_name,
      u_first_google_sheet_id,
      u_second_google_sheet_id,
      amazon_advertising_access_token,
      amazon_advertising_refresh_token,
      amazon_advertising_token_type,
      amazon_advertising_access_token_expiry,
      amazon_advertising_profile_id,
      amazon_advertising_marketplace_id,
      amazon_advertising_client_id,
      amazon_advertising_client_secret,
      amazon_advertising_return_url,
      amazon_advertising_response,
      rds_credential_id,
      server_credential_id,
      u_is_assigned,
      u_active_asin_count,
      u_allowed_report_count,
      pending_reports,
      avg_order_per_day,
      avg_sku,
      business_report_is_done,
      business_report_count,
      previous_business_report_dates,
      created_at,
      updated_at,
      created_by,
      updated_by,
      last_update,
      syncing_data,
      sync_progress,
      sync_last_update,
      table_column_configuration,
      days_of_inventory,
      u_last_cron_time,
      u_cron_status,
      u_applied_coupon_code,
      u_all_report_requested,
      u_error_message,
      default_sales_by_product_column,
    } = user;
    let users: any[] = [];
    if (user && user.allowed_user_id && user.allowed_user_id?.length > 0) {
      users = await prisma.users.findMany({
        where: {
          id: {
            in: [...user.allowed_user_id?.split(',').map((i) => parseInt(i)), id],
          },
        },
      });
    }
    console.log(
      'hi',
      users.map((u) => u.id),
    );

    await prisma.brands.create({
      data: {
        u_amazon_seller_name,
        u_amazon_marketplace_name,
        allowed_user_id,
        u_cust_id,
        u_card_last_no,
        access_token,
        password_reset_token,
        auth_key,
        u_refunded,
        u_canceled,
        u_payment,
        u_mws_seller_id,
        u_mws_auth_token,
        u_mws_status,
        u_is_logged,
        u_is_auto_logout,
        u_aff_username,
        u_aff_password,
        u_affiliate_id,
        u_affiliate_status,
        u_sub_plan,
        u_refer_date,
        db_name,
        u_db_server,
        u_db_username,
        u_db_password,
        u_enterprise_id,
        u_first_google_sheet_name,
        u_second_google_sheet_name,
        u_first_google_sheet_id,
        u_second_google_sheet_id,
        amazon_advertising_access_token,
        amazon_advertising_refresh_token,
        amazon_advertising_token_type,
        amazon_advertising_access_token_expiry,
        amazon_advertising_profile_id,
        amazon_advertising_marketplace_id,
        amazon_advertising_client_id,
        amazon_advertising_client_secret,
        amazon_advertising_return_url,
        amazon_advertising_response,
        rds_credential_id,
        server_credential_id,
        u_is_assigned,
        u_active_asin_count,
        u_allowed_report_count,
        pending_reports,
        avg_order_per_day,
        avg_sku,
        business_report_is_done,
        business_report_count,
        previous_business_report_dates,
        created_at,
        updated_at,
        created_by,
        updated_by,
        last_update,
        syncing_data,
        sync_progress,
        sync_last_update,
        table_column_configuration,
        days_of_inventory,
        u_last_cron_time,
        u_cron_status,
        u_applied_coupon_code,
        u_all_report_requested,
        u_error_message,
        default_sales_by_product_column,
        name: user.u_amazon_marketplace_name || user.u_name,
        status: Brand_status.Created,
      },
    });
  }
}
main()
  .catch((e) => console.error(e))
  .finally(async () => {
    await prisma.$disconnect();
  });
