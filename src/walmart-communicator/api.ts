/* tslint:disable */
/* eslint-disable */
/**
 * Reports API
 * Report manager system api
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AddAdItemToAdGroup
 */
export interface AddAdItemToAdGroup {
    /**
     * 
     * @type {string}
     * @memberof AddAdItemToAdGroup
     */
    'code': AddAdItemToAdGroupCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof AddAdItemToAdGroup
     */
    'details': string;
    /**
     * 
     * @type {number}
     * @memberof AddAdItemToAdGroup
     */
    'ad_item_id': number;
}

export const AddAdItemToAdGroupCodeEnum = {
    Success: 'success',
    Failure: 'failure'
} as const;

export type AddAdItemToAdGroupCodeEnum = typeof AddAdItemToAdGroupCodeEnum[keyof typeof AddAdItemToAdGroupCodeEnum];

/**
 * 
 * @export
 * @interface AddAdItemToAdGroupArgs
 */
export interface AddAdItemToAdGroupArgs {
    /**
     * 
     * @type {number}
     * @memberof AddAdItemToAdGroupArgs
     */
    'campaign_id': number;
    /**
     * 
     * @type {number}
     * @memberof AddAdItemToAdGroupArgs
     */
    'ad_group_id': number;
    /**
     * 
     * @type {number}
     * @memberof AddAdItemToAdGroupArgs
     */
    'item_id': number;
    /**
     * 
     * @type {number}
     * @memberof AddAdItemToAdGroupArgs
     */
    'bid': number;
    /**
     * 
     * @type {string}
     * @memberof AddAdItemToAdGroupArgs
     */
    'status': AddAdItemToAdGroupArgsStatusEnum;
}

export const AddAdItemToAdGroupArgsStatusEnum = {
    Enabled: 'enabled',
    Disable: 'disable'
} as const;

export type AddAdItemToAdGroupArgsStatusEnum = typeof AddAdItemToAdGroupArgsStatusEnum[keyof typeof AddAdItemToAdGroupArgsStatusEnum];

/**
 * 
 * @export
 * @interface AddAdItemToAdGroupReq
 */
export interface AddAdItemToAdGroupReq {
    /**
     * 
     * @type {Array<AddAdItemToAdGroupArgs>}
     * @memberof AddAdItemToAdGroupReq
     */
    'data': Array<AddAdItemToAdGroupArgs>;
}
/**
 * 
 * @export
 * @interface AddKeyword
 */
export interface AddKeyword {
    /**
     * 
     * @type {string}
     * @memberof AddKeyword
     */
    'code': AddKeywordCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof AddKeyword
     */
    'details': string;
    /**
     * 
     * @type {number}
     * @memberof AddKeyword
     */
    'keyword_id': number;
    /**
     * 
     * @type {string}
     * @memberof AddKeyword
     */
    'keyword_text': string;
}

export const AddKeywordCodeEnum = {
    Success: 'success',
    Failure: 'failure'
} as const;

export type AddKeywordCodeEnum = typeof AddKeywordCodeEnum[keyof typeof AddKeywordCodeEnum];

/**
 * 
 * @export
 * @interface AddKeywordArgs
 */
export interface AddKeywordArgs {
    /**
     * 
     * @type {number}
     * @memberof AddKeywordArgs
     */
    'campaign_id': number;
    /**
     * 
     * @type {number}
     * @memberof AddKeywordArgs
     */
    'ad_group_id': number;
    /**
     * 
     * @type {string}
     * @memberof AddKeywordArgs
     */
    'state': AddKeywordArgsStateEnum;
    /**
     * 
     * @type {string}
     * @memberof AddKeywordArgs
     */
    'keyword_text': string;
    /**
     * 
     * @type {string}
     * @memberof AddKeywordArgs
     */
    'match_type': AddKeywordArgsMatchTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof AddKeywordArgs
     */
    'bid': number;
}

export const AddKeywordArgsStateEnum = {
    Enabled: 'enabled',
    Paused: 'paused',
    Archived: 'archived'
} as const;

export type AddKeywordArgsStateEnum = typeof AddKeywordArgsStateEnum[keyof typeof AddKeywordArgsStateEnum];
export const AddKeywordArgsMatchTypeEnum = {
    Exact: 'exact',
    Phrase: 'phrase',
    Broad: 'broad'
} as const;

export type AddKeywordArgsMatchTypeEnum = typeof AddKeywordArgsMatchTypeEnum[keyof typeof AddKeywordArgsMatchTypeEnum];

/**
 * 
 * @export
 * @interface AddKeywordReq
 */
export interface AddKeywordReq {
    /**
     * 
     * @type {Array<AddKeywordArgs>}
     * @memberof AddKeywordReq
     */
    'data': Array<AddKeywordArgs>;
}
/**
 * 
 * @export
 * @interface BidPlacement
 */
export interface BidPlacement {
    /**
     * 
     * @type {string}
     * @memberof BidPlacement
     */
    'placement_type': BidPlacementPlacementTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof BidPlacement
     */
    'campaign_id': number;
    /**
     * 
     * @type {number}
     * @memberof BidPlacement
     */
    'multiplier': number;
}

export const BidPlacementPlacementTypeEnum = {
    BuyBox: 'Buy-Box',
    SearchIngrid: 'Search Ingrid',
    HomePage: 'Home Page',
    StockUp: 'Stock Up'
} as const;

export type BidPlacementPlacementTypeEnum = typeof BidPlacementPlacementTypeEnum[keyof typeof BidPlacementPlacementTypeEnum];

/**
 * 
 * @export
 * @interface BidPlatform
 */
export interface BidPlatform {
    /**
     * 
     * @type {string}
     * @memberof BidPlatform
     */
    'platform_type': BidPlatformPlatformTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof BidPlatform
     */
    'campaign_id': number;
    /**
     * 
     * @type {number}
     * @memberof BidPlatform
     */
    'multiplier': number;
}

export const BidPlatformPlatformTypeEnum = {
    Desktop: 'Desktop',
    Mobile: 'Mobile',
    App: 'App'
} as const;

export type BidPlatformPlatformTypeEnum = typeof BidPlatformPlatformTypeEnum[keyof typeof BidPlatformPlatformTypeEnum];

/**
 * 
 * @export
 * @interface Campaign
 */
export interface Campaign {
    /**
     * 
     * @type {string}
     * @memberof Campaign
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Campaign
     */
    'campaign_type': string;
    /**
     * 
     * @type {string}
     * @memberof Campaign
     */
    'targeting_type': CampaignTargetingTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Campaign
     */
    'status': string;
    /**
     * 
     * @type {string}
     * @memberof Campaign
     */
    'budget_type': string;
    /**
     * 
     * @type {string}
     * @memberof Campaign
     */
    'start_date': string;
    /**
     * 
     * @type {string}
     * @memberof Campaign
     */
    'end_date': string;
    /**
     * 
     * @type {number}
     * @memberof Campaign
     */
    'total_budget': number;
    /**
     * 
     * @type {number}
     * @memberof Campaign
     */
    'daily_budget': number;
    /**
     * 
     * @type {boolean}
     * @memberof Campaign
     */
    'rollover': boolean;
    /**
     * 
     * @type {number}
     * @memberof Campaign
     */
    'campaign_id': number;
    /**
     * 
     * @type {number}
     * @memberof Campaign
     */
    'advertiser_id': number;
}

export const CampaignTargetingTypeEnum = {
    Manual: 'manual',
    Auto: 'auto'
} as const;

export type CampaignTargetingTypeEnum = typeof CampaignTargetingTypeEnum[keyof typeof CampaignTargetingTypeEnum];

/**
 * 
 * @export
 * @interface CampaignAdItemList
 */
export interface CampaignAdItemList {
    /**
     * 
     * @type {number}
     * @memberof CampaignAdItemList
     */
    'campaign_id': number;
    /**
     * 
     * @type {number}
     * @memberof CampaignAdItemList
     */
    'ad_group_id': number;
    /**
     * 
     * @type {string}
     * @memberof CampaignAdItemList
     */
    'item_id': string;
    /**
     * 
     * @type {number}
     * @memberof CampaignAdItemList
     */
    'ad_item_id': number;
    /**
     * 
     * @type {number}
     * @memberof CampaignAdItemList
     */
    'bid': number;
    /**
     * 
     * @type {string}
     * @memberof CampaignAdItemList
     */
    'status': CampaignAdItemListStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof CampaignAdItemList
     */
    'item_image_url': string;
    /**
     * 
     * @type {string}
     * @memberof CampaignAdItemList
     */
    'item_page_url': string;
    /**
     * 
     * @type {string}
     * @memberof CampaignAdItemList
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CampaignAdItemList
     */
    'review_status': CampaignAdItemListReviewStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof CampaignAdItemList
     */
    'review_reason': string;
}

export const CampaignAdItemListStatusEnum = {
    Enabled: 'enabled',
    Disable: 'disable'
} as const;

export type CampaignAdItemListStatusEnum = typeof CampaignAdItemListStatusEnum[keyof typeof CampaignAdItemListStatusEnum];
export const CampaignAdItemListReviewStatusEnum = {
    Approved: 'approved',
    Pending: 'pending',
    Rejected: 'rejected'
} as const;

export type CampaignAdItemListReviewStatusEnum = typeof CampaignAdItemListReviewStatusEnum[keyof typeof CampaignAdItemListReviewStatusEnum];

/**
 * 
 * @export
 * @interface CampaignListFilter
 */
export interface CampaignListFilter {
    /**
     * 
     * @type {number}
     * @memberof CampaignListFilter
     */
    'campaign_id'?: number;
    /**
     * 
     * @type {number}
     * @memberof CampaignListFilter
     */
    'advertiser_id': number;
    /**
     * 
     * @type {string}
     * @memberof CampaignListFilter
     */
    'filter_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CampaignListFilter
     */
    'filter_last_modified_at'?: string;
}
/**
 * 
 * @export
 * @interface CampaignStats
 */
export interface CampaignStats {
    /**
     * 
     * @type {number}
     * @memberof CampaignStats
     */
    'campaign_id': number;
    /**
     * 
     * @type {number}
     * @memberof CampaignStats
     */
    'today_ad_spend': number;
    /**
     * 
     * @type {string}
     * @memberof CampaignStats
     */
    'as_of': string;
    /**
     * 
     * @type {number}
     * @memberof CampaignStats
     */
    'adgroup_id': number;
    /**
     * 
     * @type {string}
     * @memberof CampaignStats
     */
    'daily_out_of_budget_datetime': string;
    /**
     * 
     * @type {number}
     * @memberof CampaignStats
     */
    'daily_remaining_budget': number;
    /**
     * 
     * @type {number}
     * @memberof CampaignStats
     */
    'today_impressions': number;
    /**
     * 
     * @type {number}
     * @memberof CampaignStats
     */
    'today_clicks': number;
}
/**
 * 
 * @export
 * @interface CentralReportLog
 */
export interface CentralReportLog {
    /**
     * 
     * @type {number}
     * @memberof CentralReportLog
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CentralReportLog
     */
    'data_start_time'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CentralReportLog
     */
    'data_end_time'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CentralReportLog
     */
    'report_type': string;
    /**
     * 
     * @type {string}
     * @memberof CentralReportLog
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof CentralReportLog
     */
    'updated_at': string;
    /**
     * 
     * @type {string}
     * @memberof CentralReportLog
     */
    'file_url'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CentralReportLog
     */
    'status': string;
    /**
     * 
     * @type {string}
     * @memberof CentralReportLog
     */
    'error'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CentralReportLog
     */
    'report_id'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CentralReportLog
     */
    'brand': number;
}
/**
 * 
 * @export
 * @interface CentralReportLogPaginated
 */
export interface CentralReportLogPaginated {
    /**
     * 
     * @type {string}
     * @memberof CentralReportLogPaginated
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CentralReportLogPaginated
     */
    'previous'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CentralReportLogPaginated
     */
    'has_next': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CentralReportLogPaginated
     */
    'has_previous': boolean;
    /**
     * 
     * @type {number}
     * @memberof CentralReportLogPaginated
     */
    'total_pages': number;
    /**
     * 
     * @type {number}
     * @memberof CentralReportLogPaginated
     */
    'count': number;
    /**
     * 
     * @type {Array<CentralReportLog>}
     * @memberof CentralReportLogPaginated
     */
    'results': Array<CentralReportLog>;
}
/**
 * 
 * @export
 * @interface CreateAdGroup
 */
export interface CreateAdGroup {
    /**
     * 
     * @type {string}
     * @memberof CreateAdGroup
     */
    'code': CreateAdGroupCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof CreateAdGroup
     */
    'details': string;
    /**
     * 
     * @type {number}
     * @memberof CreateAdGroup
     */
    'ad_group_id': number;
}

export const CreateAdGroupCodeEnum = {
    Success: 'success',
    Failure: 'failure'
} as const;

export type CreateAdGroupCodeEnum = typeof CreateAdGroupCodeEnum[keyof typeof CreateAdGroupCodeEnum];

/**
 * 
 * @export
 * @interface CreateAdGroupArgs
 */
export interface CreateAdGroupArgs {
    /**
     * 
     * @type {string}
     * @memberof CreateAdGroupArgs
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateAdGroupArgs
     */
    'status': CreateAdGroupArgsStatusEnum;
    /**
     * 
     * @type {number}
     * @memberof CreateAdGroupArgs
     */
    'campaign_id': number;
}

export const CreateAdGroupArgsStatusEnum = {
    Enabled: 'enabled',
    Disabled: 'disabled',
    Deleted: 'deleted'
} as const;

export type CreateAdGroupArgsStatusEnum = typeof CreateAdGroupArgsStatusEnum[keyof typeof CreateAdGroupArgsStatusEnum];

/**
 * 
 * @export
 * @interface CreateAdGroupReq
 */
export interface CreateAdGroupReq {
    /**
     * 
     * @type {Array<CreateAdGroupArgs>}
     * @memberof CreateAdGroupReq
     */
    'data': Array<CreateAdGroupArgs>;
}
/**
 * 
 * @export
 * @interface CreateBidPlacementResponse
 */
export interface CreateBidPlacementResponse {
    /**
     * 
     * @type {string}
     * @memberof CreateBidPlacementResponse
     */
    'code': CreateBidPlacementResponseCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof CreateBidPlacementResponse
     */
    'details': string;
    /**
     * 
     * @type {number}
     * @memberof CreateBidPlacementResponse
     */
    'placement_multiplier_id': number;
}

export const CreateBidPlacementResponseCodeEnum = {
    Success: 'success',
    Failure: 'failure'
} as const;

export type CreateBidPlacementResponseCodeEnum = typeof CreateBidPlacementResponseCodeEnum[keyof typeof CreateBidPlacementResponseCodeEnum];

/**
 * 
 * @export
 * @interface CreateBidPlatformResponse
 */
export interface CreateBidPlatformResponse {
    /**
     * 
     * @type {string}
     * @memberof CreateBidPlatformResponse
     */
    'code': CreateBidPlatformResponseCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof CreateBidPlatformResponse
     */
    'details': string;
    /**
     * 
     * @type {number}
     * @memberof CreateBidPlatformResponse
     */
    'platform_multiplier_id': number;
}

export const CreateBidPlatformResponseCodeEnum = {
    Success: 'success',
    Failure: 'failure'
} as const;

export type CreateBidPlatformResponseCodeEnum = typeof CreateBidPlatformResponseCodeEnum[keyof typeof CreateBidPlatformResponseCodeEnum];

/**
 * 
 * @export
 * @interface CreateCampaign
 */
export interface CreateCampaign {
    /**
     * 
     * @type {string}
     * @memberof CreateCampaign
     */
    'code': CreateCampaignCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof CreateCampaign
     */
    'details': string;
    /**
     * 
     * @type {number}
     * @memberof CreateCampaign
     */
    'campaign_id': number;
}

export const CreateCampaignCodeEnum = {
    Success: 'success',
    Failure: 'failure'
} as const;

export type CreateCampaignCodeEnum = typeof CreateCampaignCodeEnum[keyof typeof CreateCampaignCodeEnum];

/**
 * 
 * @export
 * @interface CreateCampaignArgs
 */
export interface CreateCampaignArgs {
    /**
     * 
     * @type {string}
     * @memberof CreateCampaignArgs
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateCampaignArgs
     */
    'campaign_type': CreateCampaignArgsCampaignTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof CreateCampaignArgs
     */
    'targeting_type': CreateCampaignArgsTargetingTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof CreateCampaignArgs
     */
    'status': CreateCampaignArgsStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof CreateCampaignArgs
     */
    'start_date': string;
    /**
     * 
     * @type {string}
     * @memberof CreateCampaignArgs
     */
    'end_date'?: string;
    /**
     * 
     * @type {number}
     * @memberof CreateCampaignArgs
     */
    'total_budget'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateCampaignArgs
     */
    'daily_budget'?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateCampaignArgs
     */
    'budget_type': CreateCampaignArgsBudgetTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof CreateCampaignArgs
     */
    'rollover': boolean;
}

export const CreateCampaignArgsCampaignTypeEnum = {
    SponsoredProducts: 'sponsoredProducts',
    Sba: 'sba',
    Video: 'video'
} as const;

export type CreateCampaignArgsCampaignTypeEnum = typeof CreateCampaignArgsCampaignTypeEnum[keyof typeof CreateCampaignArgsCampaignTypeEnum];
export const CreateCampaignArgsTargetingTypeEnum = {
    Manual: 'manual',
    Auto: 'auto'
} as const;

export type CreateCampaignArgsTargetingTypeEnum = typeof CreateCampaignArgsTargetingTypeEnum[keyof typeof CreateCampaignArgsTargetingTypeEnum];
export const CreateCampaignArgsStatusEnum = {
    Enabled: 'enabled',
    Paused: 'paused',
    Completed: 'completed',
    Scheduled: 'scheduled',
    Proposal: 'proposal'
} as const;

export type CreateCampaignArgsStatusEnum = typeof CreateCampaignArgsStatusEnum[keyof typeof CreateCampaignArgsStatusEnum];
export const CreateCampaignArgsBudgetTypeEnum = {
    Daily: 'daily',
    Total: 'total',
    Both: 'both'
} as const;

export type CreateCampaignArgsBudgetTypeEnum = typeof CreateCampaignArgsBudgetTypeEnum[keyof typeof CreateCampaignArgsBudgetTypeEnum];

/**
 * 
 * @export
 * @interface CreateCampaignReq
 */
export interface CreateCampaignReq {
    /**
     * 
     * @type {Array<CreateCampaignArgs>}
     * @memberof CreateCampaignReq
     */
    'data': Array<CreateCampaignArgs>;
}
/**
 * 
 * @export
 * @interface CreateSVAdGroupArgs
 */
export interface CreateSVAdGroupArgs {
    /**
     * 
     * @type {number}
     * @memberof CreateSVAdGroupArgs
     */
    'ad_group_id': number;
    /**
     * 
     * @type {number}
     * @memberof CreateSVAdGroupArgs
     */
    'media_id': number;
    /**
     * 
     * @type {number}
     * @memberof CreateSVAdGroupArgs
     */
    'campaign_id': number;
}
/**
 * 
 * @export
 * @interface CreateSVAdGroupResp
 */
export interface CreateSVAdGroupResp {
    /**
     * 
     * @type {string}
     * @memberof CreateSVAdGroupResp
     */
    'code': CreateSVAdGroupRespCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof CreateSVAdGroupResp
     */
    'details': string;
    /**
     * 
     * @type {number}
     * @memberof CreateSVAdGroupResp
     */
    'ad_group_media_id': number;
}

export const CreateSVAdGroupRespCodeEnum = {
    Success: 'success',
    Failure: 'failure'
} as const;

export type CreateSVAdGroupRespCodeEnum = typeof CreateSVAdGroupRespCodeEnum[keyof typeof CreateSVAdGroupRespCodeEnum];

/**
 * 
 * @export
 * @interface CreateSponsoredBrandRequest
 */
export interface CreateSponsoredBrandRequest {
    /**
     * 
     * @type {number}
     * @memberof CreateSponsoredBrandRequest
     */
    'campaign_id': number;
    /**
     * 
     * @type {number}
     * @memberof CreateSponsoredBrandRequest
     */
    'ad_group_id': number;
    /**
     * 
     * @type {string}
     * @memberof CreateSponsoredBrandRequest
     */
    'search_amp_name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateSponsoredBrandRequest
     */
    'headline_text': string;
    /**
     * 
     * @type {string}
     * @memberof CreateSponsoredBrandRequest
     */
    'click_url': string;
}
/**
 * 
 * @export
 * @interface CreateSponsoredBrandResponse
 */
export interface CreateSponsoredBrandResponse {
    /**
     * 
     * @type {string}
     * @memberof CreateSponsoredBrandResponse
     */
    'code': CreateSponsoredBrandResponseCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof CreateSponsoredBrandResponse
     */
    'details': string;
    /**
     * 
     * @type {number}
     * @memberof CreateSponsoredBrandResponse
     */
    'sba_profile_id': number;
}

export const CreateSponsoredBrandResponseCodeEnum = {
    Success: 'success',
    Failure: 'failure'
} as const;

export type CreateSponsoredBrandResponseCodeEnum = typeof CreateSponsoredBrandResponseCodeEnum[keyof typeof CreateSponsoredBrandResponseCodeEnum];

/**
 * 
 * @export
 * @interface DeleteCampaign
 */
export interface DeleteCampaign {
    /**
     * 
     * @type {string}
     * @memberof DeleteCampaign
     */
    'code': DeleteCampaignCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof DeleteCampaign
     */
    'details': string;
    /**
     * 
     * @type {number}
     * @memberof DeleteCampaign
     */
    'campaign_id': number;
}

export const DeleteCampaignCodeEnum = {
    Success: 'success',
    Failure: 'failure'
} as const;

export type DeleteCampaignCodeEnum = typeof DeleteCampaignCodeEnum[keyof typeof DeleteCampaignCodeEnum];

/**
 * 
 * @export
 * @interface DeleteCampaignReq
 */
export interface DeleteCampaignReq {
    /**
     * 
     * @type {Array<number>}
     * @memberof DeleteCampaignReq
     */
    'campaign_ids': Array<number>;
}
/**
 * 
 * @export
 * @interface DownloadReportReq
 */
export interface DownloadReportReq {
    /**
     * 
     * @type {string}
     * @memberof DownloadReportReq
     */
    'url': string;
    /**
     * 
     * @type {number}
     * @memberof DownloadReportReq
     */
    'brand_id': number;
    /**
     * 
     * @type {string}
     * @memberof DownloadReportReq
     */
    'market_place_id': string;
}
/**
 * 
 * @export
 * @interface DownloadReportRes
 */
export interface DownloadReportRes {
    /**
     * 
     * @type {object}
     * @memberof DownloadReportRes
     */
    'data': object;
}
/**
 * 
 * @export
 * @interface GetKeywordAnalytics
 */
export interface GetKeywordAnalytics {
    /**
     * 
     * @type {string}
     * @memberof GetKeywordAnalytics
     */
    'item_id': string;
    /**
     * 
     * @type {string}
     * @memberof GetKeywordAnalytics
     */
    'normalized_query': string;
    /**
     * 
     * @type {string}
     * @memberof GetKeywordAnalytics
     */
    'raw_query': string;
    /**
     * 
     * @type {string}
     * @memberof GetKeywordAnalytics
     */
    'item_keyword_frequency': GetKeywordAnalyticsItemKeywordFrequencyEnum;
    /**
     * 
     * @type {string}
     * @memberof GetKeywordAnalytics
     */
    'traffic_keyword_frequency': GetKeywordAnalyticsTrafficKeywordFrequencyEnum;
}

export const GetKeywordAnalyticsItemKeywordFrequencyEnum = {
    High: 'high',
    Medium: 'medium',
    Low: 'low'
} as const;

export type GetKeywordAnalyticsItemKeywordFrequencyEnum = typeof GetKeywordAnalyticsItemKeywordFrequencyEnum[keyof typeof GetKeywordAnalyticsItemKeywordFrequencyEnum];
export const GetKeywordAnalyticsTrafficKeywordFrequencyEnum = {
    High: 'high',
    Medium: 'medium',
    Low: 'low'
} as const;

export type GetKeywordAnalyticsTrafficKeywordFrequencyEnum = typeof GetKeywordAnalyticsTrafficKeywordFrequencyEnum[keyof typeof GetKeywordAnalyticsTrafficKeywordFrequencyEnum];

/**
 * 
 * @export
 * @interface GetKeywordAnalyticsReq
 */
export interface GetKeywordAnalyticsReq {
    /**
     * 
     * @type {Array<number>}
     * @memberof GetKeywordAnalyticsReq
     */
    'item_ids': Array<number>;
}
/**
 * 
 * @export
 * @interface GetMediaReq
 */
export interface GetMediaReq {
    /**
     * 
     * @type {string}
     * @memberof GetMediaReq
     */
    'media_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetMediaReq
     */
    'status'?: GetMediaReqStatusEnum;
}

export const GetMediaReqStatusEnum = {
    Pending: 'PENDING',
    Processing: 'PROCESSING',
    Available: 'AVAILABLE',
    Failed: 'FAILED',
    Lived: 'LIVED'
} as const;

export type GetMediaReqStatusEnum = typeof GetMediaReqStatusEnum[keyof typeof GetMediaReqStatusEnum];

/**
 * 
 * @export
 * @interface GetMediaResp
 */
export interface GetMediaResp {
    /**
     * 
     * @type {number}
     * @memberof GetMediaResp
     */
    'media_id': number;
    /**
     * 
     * @type {string}
     * @memberof GetMediaResp
     */
    'status': string;
    /**
     * 
     * @type {string}
     * @memberof GetMediaResp
     */
    'details': string;
    /**
     * 
     * @type {string}
     * @memberof GetMediaResp
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof GetMediaResp
     */
    'thumbnail': string;
    /**
     * 
     * @type {string}
     * @memberof GetMediaResp
     */
    'video_url': string;
    /**
     * 
     * @type {string}
     * @memberof GetMediaResp
     */
    'caption_url': string;
    /**
     * 
     * @type {number}
     * @memberof GetMediaResp
     */
    'confidence_level': number;
    /**
     * 
     * @type {boolean}
     * @memberof GetMediaResp
     */
    'attached': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetMediaResp
     */
    'auto_generated': boolean;
}
/**
 * 
 * @export
 * @interface GetReportResultReq
 */
export interface GetReportResultReq {
    /**
     * 
     * @type {string}
     * @memberof GetReportResultReq
     */
    'report_id': string;
    /**
     * 
     * @type {number}
     * @memberof GetReportResultReq
     */
    'brand_id': number;
    /**
     * 
     * @type {string}
     * @memberof GetReportResultReq
     */
    'market_place_id': string;
    /**
     * 
     * @type {boolean}
     * @memberof GetReportResultReq
     */
    'is_dsp'?: boolean;
}
/**
 * 
 * @export
 * @interface GetReportResultRes
 */
export interface GetReportResultRes {
    /**
     * 
     * @type {string}
     * @memberof GetReportResultRes
     */
    'status': string;
    /**
     * 
     * @type {string}
     * @memberof GetReportResultRes
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface ItemVariant
 */
export interface ItemVariant {
    /**
     * 
     * @type {string}
     * @memberof ItemVariant
     */
    'variant_item_id': string;
    /**
     * 
     * @type {string}
     * @memberof ItemVariant
     */
    'variant_item_name': string;
    /**
     * 
     * @type {string}
     * @memberof ItemVariant
     */
    'variant_image_url': string;
}
/**
 * 
 * @export
 * @interface ListAdGroupArgs
 */
export interface ListAdGroupArgs {
    /**
     * 
     * @type {number}
     * @memberof ListAdGroupArgs
     */
    'campaign_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ListAdGroupArgs
     */
    'filter_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ListAdGroupArgs
     */
    'filter_last_modified_date'?: string;
}
/**
 * 
 * @export
 * @interface ListAdGroups
 */
export interface ListAdGroups {
    /**
     * 
     * @type {string}
     * @memberof ListAdGroups
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ListAdGroups
     */
    'status': ListAdGroupsStatusEnum;
    /**
     * 
     * @type {number}
     * @memberof ListAdGroups
     */
    'campaign_id': number;
    /**
     * 
     * @type {number}
     * @memberof ListAdGroups
     */
    'ad_group_id': number;
}

export const ListAdGroupsStatusEnum = {
    Enabled: 'enabled',
    Disabled: 'disabled',
    Deleted: 'deleted'
} as const;

export type ListAdGroupsStatusEnum = typeof ListAdGroupsStatusEnum[keyof typeof ListAdGroupsStatusEnum];

/**
 * 
 * @export
 * @interface ListAdPlacement
 */
export interface ListAdPlacement {
    /**
     * 
     * @type {string}
     * @memberof ListAdPlacement
     */
    'placement': string;
    /**
     * 
     * @type {string}
     * @memberof ListAdPlacement
     */
    'status': string;
}
/**
 * 
 * @export
 * @interface ListKeywordsInCampaign
 */
export interface ListKeywordsInCampaign {
    /**
     * 
     * @type {number}
     * @memberof ListKeywordsInCampaign
     */
    'campaign_id': number;
    /**
     * 
     * @type {number}
     * @memberof ListKeywordsInCampaign
     */
    'ad_group_id': number;
    /**
     * 
     * @type {number}
     * @memberof ListKeywordsInCampaign
     */
    'keyword_id': number;
    /**
     * 
     * @type {string}
     * @memberof ListKeywordsInCampaign
     */
    'state': ListKeywordsInCampaignStateEnum;
    /**
     * 
     * @type {string}
     * @memberof ListKeywordsInCampaign
     */
    'keyword_text': string;
    /**
     * 
     * @type {string}
     * @memberof ListKeywordsInCampaign
     */
    'match_type': ListKeywordsInCampaignMatchTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof ListKeywordsInCampaign
     */
    'bid': number;
    /**
     * 
     * @type {string}
     * @memberof ListKeywordsInCampaign
     */
    'status': ListKeywordsInCampaignStatusEnum;
}

export const ListKeywordsInCampaignStateEnum = {
    Enabled: 'enabled',
    Paused: 'paused',
    Archived: 'archived'
} as const;

export type ListKeywordsInCampaignStateEnum = typeof ListKeywordsInCampaignStateEnum[keyof typeof ListKeywordsInCampaignStateEnum];
export const ListKeywordsInCampaignMatchTypeEnum = {
    Exact: 'exact',
    Phrase: 'phrase',
    Broad: 'broad'
} as const;

export type ListKeywordsInCampaignMatchTypeEnum = typeof ListKeywordsInCampaignMatchTypeEnum[keyof typeof ListKeywordsInCampaignMatchTypeEnum];
export const ListKeywordsInCampaignStatusEnum = {
    Approved: 'approved',
    Pending: 'pending',
    Rejected: 'rejected'
} as const;

export type ListKeywordsInCampaignStatusEnum = typeof ListKeywordsInCampaignStatusEnum[keyof typeof ListKeywordsInCampaignStatusEnum];

/**
 * 
 * @export
 * @interface ListSVAdGroupArgs
 */
export interface ListSVAdGroupArgs {
    /**
     * 
     * @type {number}
     * @memberof ListSVAdGroupArgs
     */
    'campaign_id': number;
    /**
     * 
     * @type {number}
     * @memberof ListSVAdGroupArgs
     */
    'ad_group_id': number;
}
/**
 * 
 * @export
 * @interface ListSVAdGroups
 */
export interface ListSVAdGroups {
    /**
     * 
     * @type {number}
     * @memberof ListSVAdGroups
     */
    'campaign_id': number;
    /**
     * 
     * @type {number}
     * @memberof ListSVAdGroups
     */
    'ad_group_id': number;
    /**
     * 
     * @type {number}
     * @memberof ListSVAdGroups
     */
    'ad_group_media_id': number;
    /**
     * 
     * @type {number}
     * @memberof ListSVAdGroups
     */
    'media_id': number;
    /**
     * 
     * @type {string}
     * @memberof ListSVAdGroups
     */
    'review_status': string;
    /**
     * 
     * @type {string}
     * @memberof ListSVAdGroups
     */
    'review_reason': string;
    /**
     * 
     * @type {string}
     * @memberof ListSVAdGroups
     */
    'status': string;
}
/**
 * 
 * @export
 * @interface ListSponsoredBrandRequest
 */
export interface ListSponsoredBrandRequest {
    /**
     * 
     * @type {number}
     * @memberof ListSponsoredBrandRequest
     */
    'campaign_id': number;
    /**
     * 
     * @type {number}
     * @memberof ListSponsoredBrandRequest
     */
    'ad_group_id': number;
}
/**
 * 
 * @export
 * @interface MediaDeleteReq
 */
export interface MediaDeleteReq {
    /**
     * 
     * @type {number}
     * @memberof MediaDeleteReq
     */
    'media_id': number;
}
/**
 * 
 * @export
 * @interface MediaDeleteResp
 */
export interface MediaDeleteResp {
    /**
     * 
     * @type {string}
     * @memberof MediaDeleteResp
     */
    'code': MediaDeleteRespCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof MediaDeleteResp
     */
    'details': string;
}

export const MediaDeleteRespCodeEnum = {
    Success: 'success',
    Failure: 'failure'
} as const;

export type MediaDeleteRespCodeEnum = typeof MediaDeleteRespCodeEnum[keyof typeof MediaDeleteRespCodeEnum];

/**
 * 
 * @export
 * @interface MediaUpdateResp
 */
export interface MediaUpdateResp {
    /**
     * 
     * @type {string}
     * @memberof MediaUpdateResp
     */
    'code': MediaUpdateRespCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof MediaUpdateResp
     */
    'details': string;
    /**
     * 
     * @type {number}
     * @memberof MediaUpdateResp
     */
    'media_id': number;
}

export const MediaUpdateRespCodeEnum = {
    Success: 'success',
    Failure: 'failure'
} as const;

export type MediaUpdateRespCodeEnum = typeof MediaUpdateRespCodeEnum[keyof typeof MediaUpdateRespCodeEnum];

/**
 * 
 * @export
 * @interface ReportLog
 */
export interface ReportLog {
    /**
     * 
     * @type {number}
     * @memberof ReportLog
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ReportLog
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof ReportLog
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof ReportLog
     */
    'snapshot_id': string;
    /**
     * 
     * @type {string}
     * @memberof ReportLog
     */
    'file_address'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ReportLog
     */
    'data_start_date': string;
    /**
     * 
     * @type {string}
     * @memberof ReportLog
     */
    'data_end_date': string;
    /**
     * 
     * @type {string}
     * @memberof ReportLog
     */
    'status': ReportLogStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof ReportLog
     */
    'type': ReportLogTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof ReportLog
     */
    'brand_id'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ReportLog
     */
    'error'?: string | null;
}

export const ReportLogStatusEnum = {
    InProgress: 'IN_PROGRESS',
    Succeeded: 'SUCCEEDED',
    Failed: 'FAILED'
} as const;

export type ReportLogStatusEnum = typeof ReportLogStatusEnum[keyof typeof ReportLogStatusEnum];
export const ReportLogTypeEnum = {
    CampaignAdGroup: 'CAMPAIGN_AD_GROUP',
    CampaignKeyword: 'CAMPAIGN_KEYWORD',
    CampaignAdItem: 'CAMPAIGN_AD_ITEM',
    CampaignPlacement: 'CAMPAIGN_PLACEMENT',
    CampaignPlatform: 'CAMPAIGN_PLATFORM',
    CampaignPageType: 'CAMPAIGN_PAGE_TYPE',
    AdvertiserAttributes: 'ADVERTISER_ATTRIBUTES'
} as const;

export type ReportLogTypeEnum = typeof ReportLogTypeEnum[keyof typeof ReportLogTypeEnum];

/**
 * 
 * @export
 * @interface ReportLogPaginated
 */
export interface ReportLogPaginated {
    /**
     * 
     * @type {string}
     * @memberof ReportLogPaginated
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ReportLogPaginated
     */
    'previous'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ReportLogPaginated
     */
    'has_next': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ReportLogPaginated
     */
    'has_previous': boolean;
    /**
     * 
     * @type {number}
     * @memberof ReportLogPaginated
     */
    'total_pages': number;
    /**
     * 
     * @type {number}
     * @memberof ReportLogPaginated
     */
    'count': number;
    /**
     * 
     * @type {Array<ReportLog>}
     * @memberof ReportLogPaginated
     */
    'results': Array<ReportLog>;
}
/**
 * 
 * @export
 * @interface RequestReportReq
 */
export interface RequestReportReq {
    /**
     * 
     * @type {string}
     * @memberof RequestReportReq
     */
    'type': RequestReportReqTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof RequestReportReq
     */
    'date': string;
    /**
     * 
     * @type {string}
     * @memberof RequestReportReq
     */
    'end_date'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof RequestReportReq
     */
    'brand_id': number;
    /**
     * 
     * @type {string}
     * @memberof RequestReportReq
     */
    'market_place_id': string;
    /**
     * 
     * @type {string}
     * @memberof RequestReportReq
     */
    'advertiser_id'?: string | null;
}

export const RequestReportReqTypeEnum = {
    Product: 'product',
    Dsp: 'dsp'
} as const;

export type RequestReportReqTypeEnum = typeof RequestReportReqTypeEnum[keyof typeof RequestReportReqTypeEnum];

/**
 * 
 * @export
 * @interface RequestReportRes
 */
export interface RequestReportRes {
    /**
     * 
     * @type {string}
     * @memberof RequestReportRes
     */
    'report_id': string;
}
/**
 * 
 * @export
 * @interface SPAReviewCancelReq
 */
export interface SPAReviewCancelReq {
    /**
     * 
     * @type {number}
     * @memberof SPAReviewCancelReq
     */
    'campaign_id': number;
    /**
     * 
     * @type {number}
     * @memberof SPAReviewCancelReq
     */
    'ad_group_id': number;
    /**
     * 
     * @type {number}
     * @memberof SPAReviewCancelReq
     */
    'review_id': number;
}
/**
 * 
 * @export
 * @interface SPAReviewCancelResp
 */
export interface SPAReviewCancelResp {
    /**
     * 
     * @type {string}
     * @memberof SPAReviewCancelResp
     */
    'code': SPAReviewCancelRespCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof SPAReviewCancelResp
     */
    'details': string;
    /**
     * 
     * @type {number}
     * @memberof SPAReviewCancelResp
     */
    'review_id': number;
}

export const SPAReviewCancelRespCodeEnum = {
    Success: 'success',
    Failure: 'failure'
} as const;

export type SPAReviewCancelRespCodeEnum = typeof SPAReviewCancelRespCodeEnum[keyof typeof SPAReviewCancelRespCodeEnum];

/**
 * 
 * @export
 * @interface SPAReviewSubmitReq
 */
export interface SPAReviewSubmitReq {
    /**
     * 
     * @type {number}
     * @memberof SPAReviewSubmitReq
     */
    'campaign_id': number;
    /**
     * 
     * @type {number}
     * @memberof SPAReviewSubmitReq
     */
    'ad_group_id': number;
}
/**
 * 
 * @export
 * @interface SPAReviewSubmitResp
 */
export interface SPAReviewSubmitResp {
    /**
     * 
     * @type {string}
     * @memberof SPAReviewSubmitResp
     */
    'code': SPAReviewSubmitRespCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof SPAReviewSubmitResp
     */
    'details': string;
    /**
     * 
     * @type {number}
     * @memberof SPAReviewSubmitResp
     */
    'review_id': number;
}

export const SPAReviewSubmitRespCodeEnum = {
    Success: 'success',
    Failure: 'failure'
} as const;

export type SPAReviewSubmitRespCodeEnum = typeof SPAReviewSubmitRespCodeEnum[keyof typeof SPAReviewSubmitRespCodeEnum];

/**
 * 
 * @export
 * @interface SearchItem
 */
export interface SearchItem {
    /**
     * 
     * @type {string}
     * @memberof SearchItem
     */
    'item_id': string;
    /**
     * 
     * @type {string}
     * @memberof SearchItem
     */
    'item_name': string;
    /**
     * 
     * @type {string}
     * @memberof SearchItem
     */
    'item_image_url': string;
    /**
     * 
     * @type {string}
     * @memberof SearchItem
     */
    'item_page_url': string;
    /**
     * 
     * @type {number}
     * @memberof SearchItem
     */
    'suggested_bid': number;
    /**
     * 
     * @type {Array<ItemVariant>}
     * @memberof SearchItem
     */
    'variant_items': Array<ItemVariant>;
}
/**
 * 
 * @export
 * @interface SponsoredBrand
 */
export interface SponsoredBrand {
    /**
     * 
     * @type {string}
     * @memberof SponsoredBrand
     */
    'search_amp_name': string;
    /**
     * 
     * @type {string}
     * @memberof SponsoredBrand
     */
    'headline_text': string;
    /**
     * 
     * @type {string}
     * @memberof SponsoredBrand
     */
    'logo_url': string;
    /**
     * 
     * @type {string}
     * @memberof SponsoredBrand
     */
    'click_url': string;
    /**
     * 
     * @type {string}
     * @memberof SponsoredBrand
     */
    'review_status': SponsoredBrandReviewStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof SponsoredBrand
     */
    'review_reason': string;
    /**
     * 
     * @type {number}
     * @memberof SponsoredBrand
     */
    'sba_profile_id': number;
    /**
     * 
     * @type {number}
     * @memberof SponsoredBrand
     */
    'campaign_id': number;
    /**
     * 
     * @type {number}
     * @memberof SponsoredBrand
     */
    'ad_group_id': number;
}

export const SponsoredBrandReviewStatusEnum = {
    Pending: 'pending',
    Approved: 'approved',
    Rejected: 'rejected'
} as const;

export type SponsoredBrandReviewStatusEnum = typeof SponsoredBrandReviewStatusEnum[keyof typeof SponsoredBrandReviewStatusEnum];

/**
 * 
 * @export
 * @interface SubmitPlacementReq
 */
export interface SubmitPlacementReq {
    /**
     * 
     * @type {number}
     * @memberof SubmitPlacementReq
     */
    'campaign_id': number;
    /**
     * 
     * @type {Array<ListAdPlacement>}
     * @memberof SubmitPlacementReq
     */
    'placements': Array<ListAdPlacement>;
}
/**
 * 
 * @export
 * @interface SubmitPlacementResp
 */
export interface SubmitPlacementResp {
    /**
     * 
     * @type {string}
     * @memberof SubmitPlacementResp
     */
    'code': SubmitPlacementRespCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof SubmitPlacementResp
     */
    'details': string;
    /**
     * 
     * @type {string}
     * @memberof SubmitPlacementResp
     */
    'campaign_id': string;
}

export const SubmitPlacementRespCodeEnum = {
    Success: 'success',
    Failure: 'failure'
} as const;

export type SubmitPlacementRespCodeEnum = typeof SubmitPlacementRespCodeEnum[keyof typeof SubmitPlacementRespCodeEnum];

/**
 * 
 * @export
 * @interface SuggestedKeywords
 */
export interface SuggestedKeywords {
    /**
     * 
     * @type {number}
     * @memberof SuggestedKeywords
     */
    'score': number;
    /**
     * 
     * @type {string}
     * @memberof SuggestedKeywords
     */
    'query': string;
    /**
     * 
     * @type {number}
     * @memberof SuggestedKeywords
     */
    'suggested_bid': number;
    /**
     * 
     * @type {number}
     * @memberof SuggestedKeywords
     */
    'suggested_bid_broad': number;
    /**
     * 
     * @type {number}
     * @memberof SuggestedKeywords
     */
    'suggested_bid_exact': number;
    /**
     * 
     * @type {number}
     * @memberof SuggestedKeywords
     */
    'suggested_bid_phrase': number;
}
/**
 * 
 * @export
 * @interface UpdateAdGroup
 */
export interface UpdateAdGroup {
    /**
     * 
     * @type {string}
     * @memberof UpdateAdGroup
     */
    'code': UpdateAdGroupCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof UpdateAdGroup
     */
    'details': string;
    /**
     * 
     * @type {number}
     * @memberof UpdateAdGroup
     */
    'ad_group_id': number;
}

export const UpdateAdGroupCodeEnum = {
    Success: 'success',
    Failure: 'failure'
} as const;

export type UpdateAdGroupCodeEnum = typeof UpdateAdGroupCodeEnum[keyof typeof UpdateAdGroupCodeEnum];

/**
 * 
 * @export
 * @interface UpdateAdGroupArgs
 */
export interface UpdateAdGroupArgs {
    /**
     * 
     * @type {number}
     * @memberof UpdateAdGroupArgs
     */
    'ad_group_id': number;
    /**
     * 
     * @type {string}
     * @memberof UpdateAdGroupArgs
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateAdGroupArgs
     */
    'status'?: UpdateAdGroupArgsStatusEnum;
}

export const UpdateAdGroupArgsStatusEnum = {
    Enabled: 'enabled',
    Disabled: 'disabled',
    Deleted: 'deleted'
} as const;

export type UpdateAdGroupArgsStatusEnum = typeof UpdateAdGroupArgsStatusEnum[keyof typeof UpdateAdGroupArgsStatusEnum];

/**
 * 
 * @export
 * @interface UpdateAdGroupReq
 */
export interface UpdateAdGroupReq {
    /**
     * 
     * @type {Array<UpdateAdGroupArgs>}
     * @memberof UpdateAdGroupReq
     */
    'data': Array<UpdateAdGroupArgs>;
}
/**
 * 
 * @export
 * @interface UpdateAdItem
 */
export interface UpdateAdItem {
    /**
     * 
     * @type {string}
     * @memberof UpdateAdItem
     */
    'code': UpdateAdItemCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof UpdateAdItem
     */
    'details': string;
    /**
     * 
     * @type {number}
     * @memberof UpdateAdItem
     */
    'ad_item_id': number;
}

export const UpdateAdItemCodeEnum = {
    Success: 'success',
    Failure: 'failure'
} as const;

export type UpdateAdItemCodeEnum = typeof UpdateAdItemCodeEnum[keyof typeof UpdateAdItemCodeEnum];

/**
 * 
 * @export
 * @interface UpdateAdItemReq
 */
export interface UpdateAdItemReq {
    /**
     * 
     * @type {Array<AddAdItemToAdGroupArgs>}
     * @memberof UpdateAdItemReq
     */
    'data': Array<AddAdItemToAdGroupArgs>;
}
/**
 * 
 * @export
 * @interface UpdateCampaign
 */
export interface UpdateCampaign {
    /**
     * 
     * @type {string}
     * @memberof UpdateCampaign
     */
    'code': UpdateCampaignCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof UpdateCampaign
     */
    'details': string;
    /**
     * 
     * @type {number}
     * @memberof UpdateCampaign
     */
    'campaign_id': number;
}

export const UpdateCampaignCodeEnum = {
    Success: 'success',
    Failure: 'failure'
} as const;

export type UpdateCampaignCodeEnum = typeof UpdateCampaignCodeEnum[keyof typeof UpdateCampaignCodeEnum];

/**
 * 
 * @export
 * @interface UpdateCampaignArgs
 */
export interface UpdateCampaignArgs {
    /**
     * 
     * @type {string}
     * @memberof UpdateCampaignArgs
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateCampaignArgs
     */
    'status'?: UpdateCampaignArgsStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof UpdateCampaignArgs
     */
    'start_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateCampaignArgs
     */
    'end_date'?: string;
    /**
     * 
     * @type {number}
     * @memberof UpdateCampaignArgs
     */
    'total_budget'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateCampaignArgs
     */
    'daily_budget'?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateCampaignArgs
     */
    'budget_type'?: UpdateCampaignArgsBudgetTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateCampaignArgs
     */
    'rollover'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof UpdateCampaignArgs
     */
    'campaign_id': number;
}

export const UpdateCampaignArgsStatusEnum = {
    Enabled: 'enabled',
    Paused: 'paused',
    Completed: 'completed',
    Scheduled: 'scheduled',
    Proposal: 'proposal'
} as const;

export type UpdateCampaignArgsStatusEnum = typeof UpdateCampaignArgsStatusEnum[keyof typeof UpdateCampaignArgsStatusEnum];
export const UpdateCampaignArgsBudgetTypeEnum = {
    Daily: 'daily',
    Total: 'total',
    Both: 'both'
} as const;

export type UpdateCampaignArgsBudgetTypeEnum = typeof UpdateCampaignArgsBudgetTypeEnum[keyof typeof UpdateCampaignArgsBudgetTypeEnum];

/**
 * 
 * @export
 * @interface UpdateCampaignReq
 */
export interface UpdateCampaignReq {
    /**
     * 
     * @type {Array<UpdateCampaignArgs>}
     * @memberof UpdateCampaignReq
     */
    'data': Array<UpdateCampaignArgs>;
}
/**
 * 
 * @export
 * @interface UpdateCaptionReq
 */
export interface UpdateCaptionReq {
    /**
     * 
     * @type {number}
     * @memberof UpdateCaptionReq
     */
    'media_id': number;
    /**
     * 
     * @type {string}
     * @memberof UpdateCaptionReq
     */
    's3_file_name': string;
}
/**
 * 
 * @export
 * @interface UpdateCaptionResp
 */
export interface UpdateCaptionResp {
    /**
     * 
     * @type {string}
     * @memberof UpdateCaptionResp
     */
    'code': UpdateCaptionRespCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof UpdateCaptionResp
     */
    'details': string;
    /**
     * 
     * @type {number}
     * @memberof UpdateCaptionResp
     */
    'media_id': number;
    /**
     * 
     * @type {string}
     * @memberof UpdateCaptionResp
     */
    'caption_url': string;
}

export const UpdateCaptionRespCodeEnum = {
    Success: 'success',
    Failure: 'failure'
} as const;

export type UpdateCaptionRespCodeEnum = typeof UpdateCaptionRespCodeEnum[keyof typeof UpdateCaptionRespCodeEnum];

/**
 * 
 * @export
 * @interface UpdateKeyword
 */
export interface UpdateKeyword {
    /**
     * 
     * @type {string}
     * @memberof UpdateKeyword
     */
    'code': UpdateKeywordCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof UpdateKeyword
     */
    'details': string;
    /**
     * 
     * @type {number}
     * @memberof UpdateKeyword
     */
    'keyword_id': number;
}

export const UpdateKeywordCodeEnum = {
    Success: 'success',
    Failure: 'failure'
} as const;

export type UpdateKeywordCodeEnum = typeof UpdateKeywordCodeEnum[keyof typeof UpdateKeywordCodeEnum];

/**
 * 
 * @export
 * @interface UpdateKeywordArgs
 */
export interface UpdateKeywordArgs {
    /**
     * 
     * @type {number}
     * @memberof UpdateKeywordArgs
     */
    'keyword_id': number;
    /**
     * 
     * @type {string}
     * @memberof UpdateKeywordArgs
     */
    'state'?: UpdateKeywordArgsStateEnum;
    /**
     * 
     * @type {number}
     * @memberof UpdateKeywordArgs
     */
    'bid'?: number;
}

export const UpdateKeywordArgsStateEnum = {
    Enabled: 'enabled',
    Paused: 'paused',
    Archived: 'archived'
} as const;

export type UpdateKeywordArgsStateEnum = typeof UpdateKeywordArgsStateEnum[keyof typeof UpdateKeywordArgsStateEnum];

/**
 * 
 * @export
 * @interface UpdateKeywordReq
 */
export interface UpdateKeywordReq {
    /**
     * 
     * @type {Array<UpdateKeywordArgs>}
     * @memberof UpdateKeywordReq
     */
    'data': Array<UpdateKeywordArgs>;
}
/**
 * 
 * @export
 * @interface UpdateMediaReq
 */
export interface UpdateMediaReq {
    /**
     * 
     * @type {number}
     * @memberof UpdateMediaReq
     */
    'media_id': number;
    /**
     * 
     * @type {string}
     * @memberof UpdateMediaReq
     */
    'media_name': string;
}
/**
 * 
 * @export
 * @interface UpdateSVAdGroup
 */
export interface UpdateSVAdGroup {
    /**
     * 
     * @type {string}
     * @memberof UpdateSVAdGroup
     */
    'code': UpdateSVAdGroupCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof UpdateSVAdGroup
     */
    'details': string;
    /**
     * 
     * @type {number}
     * @memberof UpdateSVAdGroup
     */
    'ad_group_media_id': number;
}

export const UpdateSVAdGroupCodeEnum = {
    Success: 'success',
    Failure: 'failure'
} as const;

export type UpdateSVAdGroupCodeEnum = typeof UpdateSVAdGroupCodeEnum[keyof typeof UpdateSVAdGroupCodeEnum];

/**
 * 
 * @export
 * @interface UpdateSVAdGroupArgs
 */
export interface UpdateSVAdGroupArgs {
    /**
     * 
     * @type {number}
     * @memberof UpdateSVAdGroupArgs
     */
    'ad_group_id': number;
    /**
     * 
     * @type {number}
     * @memberof UpdateSVAdGroupArgs
     */
    'campaign_id': number;
    /**
     * 
     * @type {number}
     * @memberof UpdateSVAdGroupArgs
     */
    'ad_group_media_id': number;
    /**
     * 
     * @type {number}
     * @memberof UpdateSVAdGroupArgs
     */
    'media_id': number;
}
/**
 * 
 * @export
 * @interface UpdateSponsoredBrandRequest
 */
export interface UpdateSponsoredBrandRequest {
    /**
     * 
     * @type {number}
     * @memberof UpdateSponsoredBrandRequest
     */
    'campaign_id': number;
    /**
     * 
     * @type {number}
     * @memberof UpdateSponsoredBrandRequest
     */
    'ad_group_id': number;
    /**
     * 
     * @type {string}
     * @memberof UpdateSponsoredBrandRequest
     */
    'search_amp_name': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateSponsoredBrandRequest
     */
    'headline_text': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateSponsoredBrandRequest
     */
    'click_url': string;
    /**
     * 
     * @type {number}
     * @memberof UpdateSponsoredBrandRequest
     */
    'sba_profile_id': number;
}
/**
 * 
 * @export
 * @interface UploadAdsReq
 */
export interface UploadAdsReq {
    /**
     * 
     * @type {string}
     * @memberof UploadAdsReq
     */
    'bucket': string;
    /**
     * 
     * @type {string}
     * @memberof UploadAdsReq
     */
    'file_name': string;
    /**
     * 
     * @type {number}
     * @memberof UploadAdsReq
     */
    'brand_id': number;
}
/**
 * 
 * @export
 * @interface UploadAdsRes
 */
export interface UploadAdsRes {
    /**
     * 
     * @type {string}
     * @memberof UploadAdsRes
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface UploadCategoriesReq
 */
export interface UploadCategoriesReq {
    /**
     * 
     * @type {string}
     * @memberof UploadCategoriesReq
     */
    'bucket': string;
    /**
     * 
     * @type {string}
     * @memberof UploadCategoriesReq
     */
    'file_name': string;
    /**
     * 
     * @type {number}
     * @memberof UploadCategoriesReq
     */
    'brand_id': number;
}
/**
 * 
 * @export
 * @interface UploadCategoriesRes
 */
export interface UploadCategoriesRes {
    /**
     * 
     * @type {string}
     * @memberof UploadCategoriesRes
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface UploadCompleteReq
 */
export interface UploadCompleteReq {
    /**
     * 
     * @type {string}
     * @memberof UploadCompleteReq
     */
    'media_name': string;
    /**
     * 
     * @type {number}
     * @memberof UploadCompleteReq
     */
    'media_upload_request_id': number;
}
/**
 * 
 * @export
 * @interface UploadCompleteResp
 */
export interface UploadCompleteResp {
    /**
     * 
     * @type {string}
     * @memberof UploadCompleteResp
     */
    'code': UploadCompleteRespCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof UploadCompleteResp
     */
    'details': string;
    /**
     * 
     * @type {number}
     * @memberof UploadCompleteResp
     */
    'media_id': number;
    /**
     * 
     * @type {Array<UploadCompleteValidation>}
     * @memberof UploadCompleteResp
     */
    'errors': Array<UploadCompleteValidation>;
}

export const UploadCompleteRespCodeEnum = {
    Success: 'success',
    Failure: 'failure'
} as const;

export type UploadCompleteRespCodeEnum = typeof UploadCompleteRespCodeEnum[keyof typeof UploadCompleteRespCodeEnum];

/**
 * 
 * @export
 * @interface UploadCompleteValidation
 */
export interface UploadCompleteValidation {
    /**
     * 
     * @type {string}
     * @memberof UploadCompleteValidation
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof UploadCompleteValidation
     */
    'details': string;
    /**
     * 
     * @type {string}
     * @memberof UploadCompleteValidation
     */
    'message': string;
    /**
     * 
     * @type {string}
     * @memberof UploadCompleteValidation
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface UploadDspReq
 */
export interface UploadDspReq {
    /**
     * 
     * @type {string}
     * @memberof UploadDspReq
     */
    'bucket': string;
    /**
     * 
     * @type {string}
     * @memberof UploadDspReq
     */
    'file_name': string;
    /**
     * 
     * @type {number}
     * @memberof UploadDspReq
     */
    'brand_id': number;
}
/**
 * 
 * @export
 * @interface UploadDspRes
 */
export interface UploadDspRes {
    /**
     * 
     * @type {string}
     * @memberof UploadDspRes
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface UploadShipmentReq
 */
export interface UploadShipmentReq {
    /**
     * 
     * @type {string}
     * @memberof UploadShipmentReq
     */
    'bucket': string;
    /**
     * 
     * @type {string}
     * @memberof UploadShipmentReq
     */
    'file_name': string;
    /**
     * 
     * @type {number}
     * @memberof UploadShipmentReq
     */
    'brand_id': number;
}
/**
 * 
 * @export
 * @interface UploadShipmentRes
 */
export interface UploadShipmentRes {
    /**
     * 
     * @type {string}
     * @memberof UploadShipmentRes
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface UploadSponsoredBrandLogoRequest
 */
export interface UploadSponsoredBrandLogoRequest {
    /**
     * 
     * @type {number}
     * @memberof UploadSponsoredBrandLogoRequest
     */
    'campaign_id': number;
    /**
     * 
     * @type {number}
     * @memberof UploadSponsoredBrandLogoRequest
     */
    'ad_group_id': number;
    /**
     * 
     * @type {number}
     * @memberof UploadSponsoredBrandLogoRequest
     */
    'sba_profile_id': number;
    /**
     * 
     * @type {string}
     * @memberof UploadSponsoredBrandLogoRequest
     */
    's3_file_name': string;
}
/**
 * 
 * @export
 * @interface VideoUploadCreateLinkResp
 */
export interface VideoUploadCreateLinkResp {
    /**
     * 
     * @type {string}
     * @memberof VideoUploadCreateLinkResp
     */
    'code': VideoUploadCreateLinkRespCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof VideoUploadCreateLinkResp
     */
    'details': string;
    /**
     * 
     * @type {number}
     * @memberof VideoUploadCreateLinkResp
     */
    'media_upload_request_id': number;
    /**
     * 
     * @type {string}
     * @memberof VideoUploadCreateLinkResp
     */
    'upload_url': string;
    /**
     * 
     * @type {string}
     * @memberof VideoUploadCreateLinkResp
     */
    'caption_url': string;
}

export const VideoUploadCreateLinkRespCodeEnum = {
    Success: 'success',
    Failure: 'failure'
} as const;

export type VideoUploadCreateLinkRespCodeEnum = typeof VideoUploadCreateLinkRespCodeEnum[keyof typeof VideoUploadCreateLinkRespCodeEnum];

/**
 * 
 * @export
 * @interface VideoUploadReq
 */
export interface VideoUploadReq {
    /**
     * 
     * @type {string}
     * @memberof VideoUploadReq
     */
    'upload_url': string;
    /**
     * 
     * @type {string}
     * @memberof VideoUploadReq
     */
    's3_file_name': string;
}
/**
 * 
 * @export
 * @interface VideoUploadResp
 */
export interface VideoUploadResp {
    /**
     * 
     * @type {string}
     * @memberof VideoUploadResp
     */
    'code': VideoUploadRespCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof VideoUploadResp
     */
    'details': string;
}

export const VideoUploadRespCodeEnum = {
    Success: 'success',
    Failure: 'failure'
} as const;

export type VideoUploadRespCodeEnum = typeof VideoUploadRespCodeEnum[keyof typeof VideoUploadRespCodeEnum];


/**
 * AdvertisingApi - axios parameter creator
 * @export
 */
export const AdvertisingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {DownloadReportReq} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        advertisingDownloadCreate: async (data: DownloadReportReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('advertisingDownloadCreate', 'data', data)
            const localVarPath = `/advertising/download`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GetReportResultReq} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        advertisingGetCreate: async (data: GetReportResultReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('advertisingGetCreate', 'data', data)
            const localVarPath = `/advertising/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RequestReportReq} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        advertisingRequestCreate: async (data: RequestReportReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('advertisingRequestCreate', 'data', data)
            const localVarPath = `/advertising/request`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdvertisingApi - functional programming interface
 * @export
 */
export const AdvertisingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdvertisingApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {DownloadReportReq} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async advertisingDownloadCreate(data: DownloadReportReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DownloadReportRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.advertisingDownloadCreate(data, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AdvertisingApi.advertisingDownloadCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {GetReportResultReq} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async advertisingGetCreate(data: GetReportResultReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetReportResultRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.advertisingGetCreate(data, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AdvertisingApi.advertisingGetCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {RequestReportReq} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async advertisingRequestCreate(data: RequestReportReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RequestReportRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.advertisingRequestCreate(data, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AdvertisingApi.advertisingRequestCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * AdvertisingApi - factory interface
 * @export
 */
export const AdvertisingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdvertisingApiFp(configuration)
    return {
        /**
         * 
         * @param {AdvertisingApiAdvertisingDownloadCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        advertisingDownloadCreate(requestParameters: AdvertisingApiAdvertisingDownloadCreateRequest, options?: AxiosRequestConfig): AxiosPromise<DownloadReportRes> {
            return localVarFp.advertisingDownloadCreate(requestParameters.data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AdvertisingApiAdvertisingGetCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        advertisingGetCreate(requestParameters: AdvertisingApiAdvertisingGetCreateRequest, options?: AxiosRequestConfig): AxiosPromise<GetReportResultRes> {
            return localVarFp.advertisingGetCreate(requestParameters.data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AdvertisingApiAdvertisingRequestCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        advertisingRequestCreate(requestParameters: AdvertisingApiAdvertisingRequestCreateRequest, options?: AxiosRequestConfig): AxiosPromise<RequestReportRes> {
            return localVarFp.advertisingRequestCreate(requestParameters.data, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for advertisingDownloadCreate operation in AdvertisingApi.
 * @export
 * @interface AdvertisingApiAdvertisingDownloadCreateRequest
 */
export interface AdvertisingApiAdvertisingDownloadCreateRequest {
    /**
     * 
     * @type {DownloadReportReq}
     * @memberof AdvertisingApiAdvertisingDownloadCreate
     */
    readonly data: DownloadReportReq
}

/**
 * Request parameters for advertisingGetCreate operation in AdvertisingApi.
 * @export
 * @interface AdvertisingApiAdvertisingGetCreateRequest
 */
export interface AdvertisingApiAdvertisingGetCreateRequest {
    /**
     * 
     * @type {GetReportResultReq}
     * @memberof AdvertisingApiAdvertisingGetCreate
     */
    readonly data: GetReportResultReq
}

/**
 * Request parameters for advertisingRequestCreate operation in AdvertisingApi.
 * @export
 * @interface AdvertisingApiAdvertisingRequestCreateRequest
 */
export interface AdvertisingApiAdvertisingRequestCreateRequest {
    /**
     * 
     * @type {RequestReportReq}
     * @memberof AdvertisingApiAdvertisingRequestCreate
     */
    readonly data: RequestReportReq
}

/**
 * AdvertisingApi - object-oriented interface
 * @export
 * @class AdvertisingApi
 * @extends {BaseAPI}
 */
export class AdvertisingApi extends BaseAPI {
    /**
     * 
     * @param {AdvertisingApiAdvertisingDownloadCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdvertisingApi
     */
    public advertisingDownloadCreate(requestParameters: AdvertisingApiAdvertisingDownloadCreateRequest, options?: AxiosRequestConfig) {
        return AdvertisingApiFp(this.configuration).advertisingDownloadCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AdvertisingApiAdvertisingGetCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdvertisingApi
     */
    public advertisingGetCreate(requestParameters: AdvertisingApiAdvertisingGetCreateRequest, options?: AxiosRequestConfig) {
        return AdvertisingApiFp(this.configuration).advertisingGetCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AdvertisingApiAdvertisingRequestCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdvertisingApi
     */
    public advertisingRequestCreate(requestParameters: AdvertisingApiAdvertisingRequestCreateRequest, options?: AxiosRequestConfig) {
        return AdvertisingApiFp(this.configuration).advertisingRequestCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CommerceApi - axios parameter creator
 * @export
 */
export const CommerceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [reportType] report_type
         * @param {string} [status] status
         * @param {string} [brandId] brand_id
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceCentralLogsList: async (reportType?: string, status?: string, brandId?: string, ordering?: string, page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/commerce/central_logs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)

            if (reportType !== undefined) {
                localVarQueryParameter['report_type'] = reportType;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (brandId !== undefined) {
                localVarQueryParameter['brand_id'] = brandId;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CommerceApi - functional programming interface
 * @export
 */
export const CommerceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CommerceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [reportType] report_type
         * @param {string} [status] status
         * @param {string} [brandId] brand_id
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commerceCentralLogsList(reportType?: string, status?: string, brandId?: string, ordering?: string, page?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CentralReportLogPaginated>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commerceCentralLogsList(reportType, status, brandId, ordering, page, pageSize, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CommerceApi.commerceCentralLogsList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * CommerceApi - factory interface
 * @export
 */
export const CommerceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CommerceApiFp(configuration)
    return {
        /**
         * 
         * @param {CommerceApiCommerceCentralLogsListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commerceCentralLogsList(requestParameters: CommerceApiCommerceCentralLogsListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CentralReportLogPaginated> {
            return localVarFp.commerceCentralLogsList(requestParameters.reportType, requestParameters.status, requestParameters.brandId, requestParameters.ordering, requestParameters.page, requestParameters.pageSize, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for commerceCentralLogsList operation in CommerceApi.
 * @export
 * @interface CommerceApiCommerceCentralLogsListRequest
 */
export interface CommerceApiCommerceCentralLogsListRequest {
    /**
     * report_type
     * @type {string}
     * @memberof CommerceApiCommerceCentralLogsList
     */
    readonly reportType?: string

    /**
     * status
     * @type {string}
     * @memberof CommerceApiCommerceCentralLogsList
     */
    readonly status?: string

    /**
     * brand_id
     * @type {string}
     * @memberof CommerceApiCommerceCentralLogsList
     */
    readonly brandId?: string

    /**
     * Which field to use when ordering the results.
     * @type {string}
     * @memberof CommerceApiCommerceCentralLogsList
     */
    readonly ordering?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof CommerceApiCommerceCentralLogsList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof CommerceApiCommerceCentralLogsList
     */
    readonly pageSize?: number
}

/**
 * CommerceApi - object-oriented interface
 * @export
 * @class CommerceApi
 * @extends {BaseAPI}
 */
export class CommerceApi extends BaseAPI {
    /**
     * 
     * @param {CommerceApiCommerceCentralLogsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommerceApi
     */
    public commerceCentralLogsList(requestParameters: CommerceApiCommerceCentralLogsListRequest = {}, options?: AxiosRequestConfig) {
        return CommerceApiFp(this.configuration).commerceCentralLogsList(requestParameters.reportType, requestParameters.status, requestParameters.brandId, requestParameters.ordering, requestParameters.page, requestParameters.pageSize, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UploadApi - axios parameter creator
 * @export
 */
export const UploadApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {UploadAdsReq} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadAdsCreate: async (data: UploadAdsReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('uploadAdsCreate', 'data', data)
            const localVarPath = `/upload/ads`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UploadCategoriesReq} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadCategoryCreate: async (data: UploadCategoriesReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('uploadCategoryCreate', 'data', data)
            const localVarPath = `/upload/category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UploadDspReq} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadDspCreate: async (data: UploadDspReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('uploadDspCreate', 'data', data)
            const localVarPath = `/upload/dsp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UploadShipmentReq} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadShipmentCreate: async (data: UploadShipmentReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('uploadShipmentCreate', 'data', data)
            const localVarPath = `/upload/shipment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UploadApi - functional programming interface
 * @export
 */
export const UploadApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UploadApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {UploadAdsReq} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadAdsCreate(data: UploadAdsReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadAdsRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadAdsCreate(data, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UploadApi.uploadAdsCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {UploadCategoriesReq} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadCategoryCreate(data: UploadCategoriesReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadCategoriesRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadCategoryCreate(data, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UploadApi.uploadCategoryCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {UploadDspReq} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadDspCreate(data: UploadDspReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadDspRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadDspCreate(data, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UploadApi.uploadDspCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {UploadShipmentReq} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadShipmentCreate(data: UploadShipmentReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadShipmentRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadShipmentCreate(data, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UploadApi.uploadShipmentCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * UploadApi - factory interface
 * @export
 */
export const UploadApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UploadApiFp(configuration)
    return {
        /**
         * 
         * @param {UploadApiUploadAdsCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadAdsCreate(requestParameters: UploadApiUploadAdsCreateRequest, options?: AxiosRequestConfig): AxiosPromise<UploadAdsRes> {
            return localVarFp.uploadAdsCreate(requestParameters.data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UploadApiUploadCategoryCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadCategoryCreate(requestParameters: UploadApiUploadCategoryCreateRequest, options?: AxiosRequestConfig): AxiosPromise<UploadCategoriesRes> {
            return localVarFp.uploadCategoryCreate(requestParameters.data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UploadApiUploadDspCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadDspCreate(requestParameters: UploadApiUploadDspCreateRequest, options?: AxiosRequestConfig): AxiosPromise<UploadDspRes> {
            return localVarFp.uploadDspCreate(requestParameters.data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UploadApiUploadShipmentCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadShipmentCreate(requestParameters: UploadApiUploadShipmentCreateRequest, options?: AxiosRequestConfig): AxiosPromise<UploadShipmentRes> {
            return localVarFp.uploadShipmentCreate(requestParameters.data, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for uploadAdsCreate operation in UploadApi.
 * @export
 * @interface UploadApiUploadAdsCreateRequest
 */
export interface UploadApiUploadAdsCreateRequest {
    /**
     * 
     * @type {UploadAdsReq}
     * @memberof UploadApiUploadAdsCreate
     */
    readonly data: UploadAdsReq
}

/**
 * Request parameters for uploadCategoryCreate operation in UploadApi.
 * @export
 * @interface UploadApiUploadCategoryCreateRequest
 */
export interface UploadApiUploadCategoryCreateRequest {
    /**
     * 
     * @type {UploadCategoriesReq}
     * @memberof UploadApiUploadCategoryCreate
     */
    readonly data: UploadCategoriesReq
}

/**
 * Request parameters for uploadDspCreate operation in UploadApi.
 * @export
 * @interface UploadApiUploadDspCreateRequest
 */
export interface UploadApiUploadDspCreateRequest {
    /**
     * 
     * @type {UploadDspReq}
     * @memberof UploadApiUploadDspCreate
     */
    readonly data: UploadDspReq
}

/**
 * Request parameters for uploadShipmentCreate operation in UploadApi.
 * @export
 * @interface UploadApiUploadShipmentCreateRequest
 */
export interface UploadApiUploadShipmentCreateRequest {
    /**
     * 
     * @type {UploadShipmentReq}
     * @memberof UploadApiUploadShipmentCreate
     */
    readonly data: UploadShipmentReq
}

/**
 * UploadApi - object-oriented interface
 * @export
 * @class UploadApi
 * @extends {BaseAPI}
 */
export class UploadApi extends BaseAPI {
    /**
     * 
     * @param {UploadApiUploadAdsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadApi
     */
    public uploadAdsCreate(requestParameters: UploadApiUploadAdsCreateRequest, options?: AxiosRequestConfig) {
        return UploadApiFp(this.configuration).uploadAdsCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UploadApiUploadCategoryCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadApi
     */
    public uploadCategoryCreate(requestParameters: UploadApiUploadCategoryCreateRequest, options?: AxiosRequestConfig) {
        return UploadApiFp(this.configuration).uploadCategoryCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UploadApiUploadDspCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadApi
     */
    public uploadDspCreate(requestParameters: UploadApiUploadDspCreateRequest, options?: AxiosRequestConfig) {
        return UploadApiFp(this.configuration).uploadDspCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UploadApiUploadShipmentCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadApi
     */
    public uploadShipmentCreate(requestParameters: UploadApiUploadShipmentCreateRequest, options?: AxiosRequestConfig) {
        return UploadApiFp(this.configuration).uploadShipmentCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * WalmartAdsReportsApi - axios parameter creator
 * @export
 */
export const WalmartAdsReportsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} brandId 
         * @param {WalmartAdsReportsLogsListTypeEnum} [type] type
         * @param {WalmartAdsReportsLogsListStatusEnum} [status] status
         * @param {string} [search] A search term.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartAdsReportsLogsList: async (brandId: number, type?: WalmartAdsReportsLogsListTypeEnum, status?: WalmartAdsReportsLogsListStatusEnum, search?: string, ordering?: string, page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('walmartAdsReportsLogsList', 'brandId', brandId)
            const localVarPath = `/walmart_ads_reports/logs/{brand_id}`
                .replace(`{${"brand_id"}}`, encodeURIComponent(String(brandId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WalmartAdsReportsApi - functional programming interface
 * @export
 */
export const WalmartAdsReportsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WalmartAdsReportsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} brandId 
         * @param {WalmartAdsReportsLogsListTypeEnum} [type] type
         * @param {WalmartAdsReportsLogsListStatusEnum} [status] status
         * @param {string} [search] A search term.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walmartAdsReportsLogsList(brandId: number, type?: WalmartAdsReportsLogsListTypeEnum, status?: WalmartAdsReportsLogsListStatusEnum, search?: string, ordering?: string, page?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportLogPaginated>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walmartAdsReportsLogsList(brandId, type, status, search, ordering, page, pageSize, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WalmartAdsReportsApi.walmartAdsReportsLogsList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * WalmartAdsReportsApi - factory interface
 * @export
 */
export const WalmartAdsReportsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WalmartAdsReportsApiFp(configuration)
    return {
        /**
         * 
         * @param {WalmartAdsReportsApiWalmartAdsReportsLogsListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartAdsReportsLogsList(requestParameters: WalmartAdsReportsApiWalmartAdsReportsLogsListRequest, options?: AxiosRequestConfig): AxiosPromise<ReportLogPaginated> {
            return localVarFp.walmartAdsReportsLogsList(requestParameters.brandId, requestParameters.type, requestParameters.status, requestParameters.search, requestParameters.ordering, requestParameters.page, requestParameters.pageSize, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for walmartAdsReportsLogsList operation in WalmartAdsReportsApi.
 * @export
 * @interface WalmartAdsReportsApiWalmartAdsReportsLogsListRequest
 */
export interface WalmartAdsReportsApiWalmartAdsReportsLogsListRequest {
    /**
     * 
     * @type {number}
     * @memberof WalmartAdsReportsApiWalmartAdsReportsLogsList
     */
    readonly brandId: number

    /**
     * type
     * @type {'CAMPAIGN_AD_GROUP' | 'CAMPAIGN_KEYWORD' | 'CAMPAIGN_AD_ITEM' | 'CAMPAIGN_PLACEMENT' | 'CAMPAIGN_PLATFORM' | 'CAMPAIGN_PAGE_TYPE' | 'ADVERTISER_ATTRIBUTES'}
     * @memberof WalmartAdsReportsApiWalmartAdsReportsLogsList
     */
    readonly type?: WalmartAdsReportsLogsListTypeEnum

    /**
     * status
     * @type {'IN_PROGRESS' | 'SUCCEEDED' | 'FAILED'}
     * @memberof WalmartAdsReportsApiWalmartAdsReportsLogsList
     */
    readonly status?: WalmartAdsReportsLogsListStatusEnum

    /**
     * A search term.
     * @type {string}
     * @memberof WalmartAdsReportsApiWalmartAdsReportsLogsList
     */
    readonly search?: string

    /**
     * Which field to use when ordering the results.
     * @type {string}
     * @memberof WalmartAdsReportsApiWalmartAdsReportsLogsList
     */
    readonly ordering?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof WalmartAdsReportsApiWalmartAdsReportsLogsList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof WalmartAdsReportsApiWalmartAdsReportsLogsList
     */
    readonly pageSize?: number
}

/**
 * WalmartAdsReportsApi - object-oriented interface
 * @export
 * @class WalmartAdsReportsApi
 * @extends {BaseAPI}
 */
export class WalmartAdsReportsApi extends BaseAPI {
    /**
     * 
     * @param {WalmartAdsReportsApiWalmartAdsReportsLogsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalmartAdsReportsApi
     */
    public walmartAdsReportsLogsList(requestParameters: WalmartAdsReportsApiWalmartAdsReportsLogsListRequest, options?: AxiosRequestConfig) {
        return WalmartAdsReportsApiFp(this.configuration).walmartAdsReportsLogsList(requestParameters.brandId, requestParameters.type, requestParameters.status, requestParameters.search, requestParameters.ordering, requestParameters.page, requestParameters.pageSize, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const WalmartAdsReportsLogsListTypeEnum = {
    CampaignAdGroup: 'CAMPAIGN_AD_GROUP',
    CampaignKeyword: 'CAMPAIGN_KEYWORD',
    CampaignAdItem: 'CAMPAIGN_AD_ITEM',
    CampaignPlacement: 'CAMPAIGN_PLACEMENT',
    CampaignPlatform: 'CAMPAIGN_PLATFORM',
    CampaignPageType: 'CAMPAIGN_PAGE_TYPE',
    AdvertiserAttributes: 'ADVERTISER_ATTRIBUTES'
} as const;
export type WalmartAdsReportsLogsListTypeEnum = typeof WalmartAdsReportsLogsListTypeEnum[keyof typeof WalmartAdsReportsLogsListTypeEnum];
/**
 * @export
 */
export const WalmartAdsReportsLogsListStatusEnum = {
    InProgress: 'IN_PROGRESS',
    Succeeded: 'SUCCEEDED',
    Failed: 'FAILED'
} as const;
export type WalmartAdsReportsLogsListStatusEnum = typeof WalmartAdsReportsLogsListStatusEnum[keyof typeof WalmartAdsReportsLogsListStatusEnum];


/**
 * WalmartCampaignApi - axios parameter creator
 * @export
 */
export const WalmartCampaignApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} advertiserId 
         * @param {CreateAdGroupReq} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignAdGroupCreateCreate: async (advertiserId: string, data: CreateAdGroupReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'advertiserId' is not null or undefined
            assertParamExists('walmartCampaignAdGroupCreateCreate', 'advertiserId', advertiserId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('walmartCampaignAdGroupCreateCreate', 'data', data)
            const localVarPath = `/walmart_campaign/ad-group/create/{advertiser_id}`
                .replace(`{${"advertiser_id"}}`, encodeURIComponent(String(advertiserId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {ListAdGroupArgs} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignAdGroupListCreate: async (advertiserId: string, data: ListAdGroupArgs, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'advertiserId' is not null or undefined
            assertParamExists('walmartCampaignAdGroupListCreate', 'advertiserId', advertiserId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('walmartCampaignAdGroupListCreate', 'data', data)
            const localVarPath = `/walmart_campaign/ad-group/list/{advertiser_id}`
                .replace(`{${"advertiser_id"}}`, encodeURIComponent(String(advertiserId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {UpdateAdGroupReq} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignAdGroupUpdateUpdate: async (advertiserId: string, data: UpdateAdGroupReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'advertiserId' is not null or undefined
            assertParamExists('walmartCampaignAdGroupUpdateUpdate', 'advertiserId', advertiserId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('walmartCampaignAdGroupUpdateUpdate', 'data', data)
            const localVarPath = `/walmart_campaign/ad-group/update/{advertiser_id}`
                .replace(`{${"advertiser_id"}}`, encodeURIComponent(String(advertiserId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {AddAdItemToAdGroupReq} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignAdItemAddCreate: async (advertiserId: string, data: AddAdItemToAdGroupReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'advertiserId' is not null or undefined
            assertParamExists('walmartCampaignAdItemAddCreate', 'advertiserId', advertiserId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('walmartCampaignAdItemAddCreate', 'data', data)
            const localVarPath = `/walmart_campaign/ad-item/add/{advertiser_id}`
                .replace(`{${"advertiser_id"}}`, encodeURIComponent(String(advertiserId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {string} campaignId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignAdItemListRead: async (advertiserId: string, campaignId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'advertiserId' is not null or undefined
            assertParamExists('walmartCampaignAdItemListRead', 'advertiserId', advertiserId)
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('walmartCampaignAdItemListRead', 'campaignId', campaignId)
            const localVarPath = `/walmart_campaign/ad-item/list/{advertiser_id}/{campaign_id}`
                .replace(`{${"advertiser_id"}}`, encodeURIComponent(String(advertiserId)))
                .replace(`{${"campaign_id"}}`, encodeURIComponent(String(campaignId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {UpdateAdItemReq} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignAdItemUpdateUpdate: async (advertiserId: string, data: UpdateAdItemReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'advertiserId' is not null or undefined
            assertParamExists('walmartCampaignAdItemUpdateUpdate', 'advertiserId', advertiserId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('walmartCampaignAdItemUpdateUpdate', 'data', data)
            const localVarPath = `/walmart_campaign/ad-item/update/{advertiser_id}`
                .replace(`{${"advertiser_id"}}`, encodeURIComponent(String(advertiserId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {string} campaignId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignAdPlacementListCreate: async (advertiserId: string, campaignId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'advertiserId' is not null or undefined
            assertParamExists('walmartCampaignAdPlacementListCreate', 'advertiserId', advertiserId)
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('walmartCampaignAdPlacementListCreate', 'campaignId', campaignId)
            const localVarPath = `/walmart_campaign/ad-placement/list/{advertiser_id}/{campaign_id}`
                .replace(`{${"advertiser_id"}}`, encodeURIComponent(String(advertiserId)))
                .replace(`{${"campaign_id"}}`, encodeURIComponent(String(campaignId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {SubmitPlacementReq} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignAdPlacementUpdateUpdate: async (advertiserId: string, data: SubmitPlacementReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'advertiserId' is not null or undefined
            assertParamExists('walmartCampaignAdPlacementUpdateUpdate', 'advertiserId', advertiserId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('walmartCampaignAdPlacementUpdateUpdate', 'data', data)
            const localVarPath = `/walmart_campaign/ad-placement/update/{advertiser_id}`
                .replace(`{${"advertiser_id"}}`, encodeURIComponent(String(advertiserId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {Array<BidPlacement>} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignBidCreateCreate: async (advertiserId: string, data: Array<BidPlacement>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'advertiserId' is not null or undefined
            assertParamExists('walmartCampaignBidCreateCreate', 'advertiserId', advertiserId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('walmartCampaignBidCreateCreate', 'data', data)
            const localVarPath = `/walmart_campaign/bid-create/{advertiser_id}/`
                .replace(`{${"advertiser_id"}}`, encodeURIComponent(String(advertiserId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {string} campaignId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignBidListRead: async (advertiserId: string, campaignId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'advertiserId' is not null or undefined
            assertParamExists('walmartCampaignBidListRead', 'advertiserId', advertiserId)
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('walmartCampaignBidListRead', 'campaignId', campaignId)
            const localVarPath = `/walmart_campaign/bid-list/{advertiser_id}/{campaign_id}`
                .replace(`{${"advertiser_id"}}`, encodeURIComponent(String(advertiserId)))
                .replace(`{${"campaign_id"}}`, encodeURIComponent(String(campaignId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {Array<BidPlatform>} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignBidPlatformCreateCreate: async (advertiserId: string, data: Array<BidPlatform>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'advertiserId' is not null or undefined
            assertParamExists('walmartCampaignBidPlatformCreateCreate', 'advertiserId', advertiserId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('walmartCampaignBidPlatformCreateCreate', 'data', data)
            const localVarPath = `/walmart_campaign/bid-platform-create/{advertiser_id}/`
                .replace(`{${"advertiser_id"}}`, encodeURIComponent(String(advertiserId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {string} campaignId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignBidPlatformListRead: async (advertiserId: string, campaignId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'advertiserId' is not null or undefined
            assertParamExists('walmartCampaignBidPlatformListRead', 'advertiserId', advertiserId)
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('walmartCampaignBidPlatformListRead', 'campaignId', campaignId)
            const localVarPath = `/walmart_campaign/bid-platform-list/{advertiser_id}/{campaign_id}`
                .replace(`{${"advertiser_id"}}`, encodeURIComponent(String(advertiserId)))
                .replace(`{${"campaign_id"}}`, encodeURIComponent(String(campaignId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {BidPlatform} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignBidPlatformUpdateUpdate: async (advertiserId: string, data: BidPlatform, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'advertiserId' is not null or undefined
            assertParamExists('walmartCampaignBidPlatformUpdateUpdate', 'advertiserId', advertiserId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('walmartCampaignBidPlatformUpdateUpdate', 'data', data)
            const localVarPath = `/walmart_campaign/bid-platform-update/{advertiser_id}/`
                .replace(`{${"advertiser_id"}}`, encodeURIComponent(String(advertiserId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {BidPlacement} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignBidUpdateUpdate: async (advertiserId: string, data: BidPlacement, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'advertiserId' is not null or undefined
            assertParamExists('walmartCampaignBidUpdateUpdate', 'advertiserId', advertiserId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('walmartCampaignBidUpdateUpdate', 'data', data)
            const localVarPath = `/walmart_campaign/bid-update/{advertiser_id}/`
                .replace(`{${"advertiser_id"}}`, encodeURIComponent(String(advertiserId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {CreateCampaignReq} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignCreateCreate: async (advertiserId: string, data: CreateCampaignReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'advertiserId' is not null or undefined
            assertParamExists('walmartCampaignCreateCreate', 'advertiserId', advertiserId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('walmartCampaignCreateCreate', 'data', data)
            const localVarPath = `/walmart_campaign/create/{advertiser_id}`
                .replace(`{${"advertiser_id"}}`, encodeURIComponent(String(advertiserId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {DeleteCampaignReq} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignDeleteUpdate: async (advertiserId: string, data: DeleteCampaignReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'advertiserId' is not null or undefined
            assertParamExists('walmartCampaignDeleteUpdate', 'advertiserId', advertiserId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('walmartCampaignDeleteUpdate', 'data', data)
            const localVarPath = `/walmart_campaign/delete/{advertiser_id}`
                .replace(`{${"advertiser_id"}}`, encodeURIComponent(String(advertiserId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {string} searchText 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignItemsSearchRead: async (advertiserId: string, searchText: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'advertiserId' is not null or undefined
            assertParamExists('walmartCampaignItemsSearchRead', 'advertiserId', advertiserId)
            // verify required parameter 'searchText' is not null or undefined
            assertParamExists('walmartCampaignItemsSearchRead', 'searchText', searchText)
            const localVarPath = `/walmart_campaign/items/search/{advertiser_id}/{search_text}`
                .replace(`{${"advertiser_id"}}`, encodeURIComponent(String(advertiserId)))
                .replace(`{${"search_text"}}`, encodeURIComponent(String(searchText)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {AddKeywordReq} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignKeywordsAddCreate: async (advertiserId: string, data: AddKeywordReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'advertiserId' is not null or undefined
            assertParamExists('walmartCampaignKeywordsAddCreate', 'advertiserId', advertiserId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('walmartCampaignKeywordsAddCreate', 'data', data)
            const localVarPath = `/walmart_campaign/keywords/add/{advertiser_id}`
                .replace(`{${"advertiser_id"}}`, encodeURIComponent(String(advertiserId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {GetKeywordAnalyticsReq} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignKeywordsAnalyticsCreate: async (advertiserId: string, data: GetKeywordAnalyticsReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'advertiserId' is not null or undefined
            assertParamExists('walmartCampaignKeywordsAnalyticsCreate', 'advertiserId', advertiserId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('walmartCampaignKeywordsAnalyticsCreate', 'data', data)
            const localVarPath = `/walmart_campaign/keywords/analytics/{advertiser_id}`
                .replace(`{${"advertiser_id"}}`, encodeURIComponent(String(advertiserId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {string} campaignId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignKeywordsListRead: async (advertiserId: string, campaignId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'advertiserId' is not null or undefined
            assertParamExists('walmartCampaignKeywordsListRead', 'advertiserId', advertiserId)
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('walmartCampaignKeywordsListRead', 'campaignId', campaignId)
            const localVarPath = `/walmart_campaign/keywords/list/{advertiser_id}/{campaign_id}`
                .replace(`{${"advertiser_id"}}`, encodeURIComponent(String(advertiserId)))
                .replace(`{${"campaign_id"}}`, encodeURIComponent(String(campaignId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {string} adGroupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignKeywordsSuggestedRead: async (advertiserId: string, adGroupId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'advertiserId' is not null or undefined
            assertParamExists('walmartCampaignKeywordsSuggestedRead', 'advertiserId', advertiserId)
            // verify required parameter 'adGroupId' is not null or undefined
            assertParamExists('walmartCampaignKeywordsSuggestedRead', 'adGroupId', adGroupId)
            const localVarPath = `/walmart_campaign/keywords/suggested/{advertiser_id}/{ad_group_id}`
                .replace(`{${"advertiser_id"}}`, encodeURIComponent(String(advertiserId)))
                .replace(`{${"ad_group_id"}}`, encodeURIComponent(String(adGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {UpdateKeywordReq} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignKeywordsUpdateUpdate: async (advertiserId: string, data: UpdateKeywordReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'advertiserId' is not null or undefined
            assertParamExists('walmartCampaignKeywordsUpdateUpdate', 'advertiserId', advertiserId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('walmartCampaignKeywordsUpdateUpdate', 'data', data)
            const localVarPath = `/walmart_campaign/keywords/update/{advertiser_id}`
                .replace(`{${"advertiser_id"}}`, encodeURIComponent(String(advertiserId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CampaignListFilter} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignListCreate: async (data: CampaignListFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('walmartCampaignListCreate', 'data', data)
            const localVarPath = `/walmart_campaign/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {ListSponsoredBrandRequest} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignSponsoredBrandCreate: async (advertiserId: string, data: ListSponsoredBrandRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'advertiserId' is not null or undefined
            assertParamExists('walmartCampaignSponsoredBrandCreate', 'advertiserId', advertiserId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('walmartCampaignSponsoredBrandCreate', 'data', data)
            const localVarPath = `/walmart_campaign/sponsored-brand/{advertiser_id}/`
                .replace(`{${"advertiser_id"}}`, encodeURIComponent(String(advertiserId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {Array<CreateSponsoredBrandRequest>} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignSponsoredBrandCreateCreate: async (advertiserId: string, data: Array<CreateSponsoredBrandRequest>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'advertiserId' is not null or undefined
            assertParamExists('walmartCampaignSponsoredBrandCreateCreate', 'advertiserId', advertiserId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('walmartCampaignSponsoredBrandCreateCreate', 'data', data)
            const localVarPath = `/walmart_campaign/sponsored-brand-create/{advertiser_id}/`
                .replace(`{${"advertiser_id"}}`, encodeURIComponent(String(advertiserId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {SPAReviewCancelReq} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignSponsoredBrandReviewCancelUpdate: async (advertiserId: string, data: SPAReviewCancelReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'advertiserId' is not null or undefined
            assertParamExists('walmartCampaignSponsoredBrandReviewCancelUpdate', 'advertiserId', advertiserId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('walmartCampaignSponsoredBrandReviewCancelUpdate', 'data', data)
            const localVarPath = `/walmart_campaign/sponsored-brand-review-cancel/{advertiser_id}/`
                .replace(`{${"advertiser_id"}}`, encodeURIComponent(String(advertiserId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {string} adGroupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignSponsoredBrandReviewListRead: async (advertiserId: string, adGroupId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'advertiserId' is not null or undefined
            assertParamExists('walmartCampaignSponsoredBrandReviewListRead', 'advertiserId', advertiserId)
            // verify required parameter 'adGroupId' is not null or undefined
            assertParamExists('walmartCampaignSponsoredBrandReviewListRead', 'adGroupId', adGroupId)
            const localVarPath = `/walmart_campaign/sponsored-brand-review-list/{advertiser_id}/{ad_group_id}`
                .replace(`{${"advertiser_id"}}`, encodeURIComponent(String(advertiserId)))
                .replace(`{${"ad_group_id"}}`, encodeURIComponent(String(adGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {SPAReviewSubmitReq} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignSponsoredBrandReviewSubmitCreate: async (advertiserId: string, data: SPAReviewSubmitReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'advertiserId' is not null or undefined
            assertParamExists('walmartCampaignSponsoredBrandReviewSubmitCreate', 'advertiserId', advertiserId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('walmartCampaignSponsoredBrandReviewSubmitCreate', 'data', data)
            const localVarPath = `/walmart_campaign/sponsored-brand-review-submit/{advertiser_id}/`
                .replace(`{${"advertiser_id"}}`, encodeURIComponent(String(advertiserId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {UpdateSponsoredBrandRequest} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignSponsoredBrandUpdateUpdate: async (advertiserId: string, data: UpdateSponsoredBrandRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'advertiserId' is not null or undefined
            assertParamExists('walmartCampaignSponsoredBrandUpdateUpdate', 'advertiserId', advertiserId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('walmartCampaignSponsoredBrandUpdateUpdate', 'data', data)
            const localVarPath = `/walmart_campaign/sponsored-brand-update/{advertiser_id}/`
                .replace(`{${"advertiser_id"}}`, encodeURIComponent(String(advertiserId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {UploadSponsoredBrandLogoRequest} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignSponsoredBrandUploadCreate: async (advertiserId: string, data: UploadSponsoredBrandLogoRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'advertiserId' is not null or undefined
            assertParamExists('walmartCampaignSponsoredBrandUploadCreate', 'advertiserId', advertiserId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('walmartCampaignSponsoredBrandUploadCreate', 'data', data)
            const localVarPath = `/walmart_campaign/sponsored-brand-upload/{advertiser_id}/`
                .replace(`{${"advertiser_id"}}`, encodeURIComponent(String(advertiserId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {string} campaignId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignStatsRead: async (advertiserId: string, campaignId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'advertiserId' is not null or undefined
            assertParamExists('walmartCampaignStatsRead', 'advertiserId', advertiserId)
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('walmartCampaignStatsRead', 'campaignId', campaignId)
            const localVarPath = `/walmart_campaign/stats/{advertiser_id}/{campaign_id}`
                .replace(`{${"advertiser_id"}}`, encodeURIComponent(String(advertiserId)))
                .replace(`{${"campaign_id"}}`, encodeURIComponent(String(campaignId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {Array<CreateSVAdGroupArgs>} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignSvAdGroupCreateCreate: async (advertiserId: string, data: Array<CreateSVAdGroupArgs>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'advertiserId' is not null or undefined
            assertParamExists('walmartCampaignSvAdGroupCreateCreate', 'advertiserId', advertiserId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('walmartCampaignSvAdGroupCreateCreate', 'data', data)
            const localVarPath = `/walmart_campaign/sv-ad-group/create/{advertiser_id}`
                .replace(`{${"advertiser_id"}}`, encodeURIComponent(String(advertiserId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {ListSVAdGroupArgs} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignSvAdGroupListCreate: async (advertiserId: string, data: ListSVAdGroupArgs, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'advertiserId' is not null or undefined
            assertParamExists('walmartCampaignSvAdGroupListCreate', 'advertiserId', advertiserId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('walmartCampaignSvAdGroupListCreate', 'data', data)
            const localVarPath = `/walmart_campaign/sv-ad-group/list/{advertiser_id}`
                .replace(`{${"advertiser_id"}}`, encodeURIComponent(String(advertiserId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {Array<UpdateSVAdGroupArgs>} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignSvAdGroupUpdateUpdate: async (advertiserId: string, data: Array<UpdateSVAdGroupArgs>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'advertiserId' is not null or undefined
            assertParamExists('walmartCampaignSvAdGroupUpdateUpdate', 'advertiserId', advertiserId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('walmartCampaignSvAdGroupUpdateUpdate', 'data', data)
            const localVarPath = `/walmart_campaign/sv-ad-group/update/{advertiser_id}`
                .replace(`{${"advertiser_id"}}`, encodeURIComponent(String(advertiserId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {UpdateCampaignReq} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignUpdateUpdate: async (advertiserId: string, data: UpdateCampaignReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'advertiserId' is not null or undefined
            assertParamExists('walmartCampaignUpdateUpdate', 'advertiserId', advertiserId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('walmartCampaignUpdateUpdate', 'data', data)
            const localVarPath = `/walmart_campaign/update/{advertiser_id}`
                .replace(`{${"advertiser_id"}}`, encodeURIComponent(String(advertiserId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {UploadCompleteReq} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignVideoManagementCompleteCreate: async (advertiserId: string, data: UploadCompleteReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'advertiserId' is not null or undefined
            assertParamExists('walmartCampaignVideoManagementCompleteCreate', 'advertiserId', advertiserId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('walmartCampaignVideoManagementCompleteCreate', 'data', data)
            const localVarPath = `/walmart_campaign/video-management/{advertiser_id}/complete`
                .replace(`{${"advertiser_id"}}`, encodeURIComponent(String(advertiserId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignVideoManagementCreate: async (advertiserId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'advertiserId' is not null or undefined
            assertParamExists('walmartCampaignVideoManagementCreate', 'advertiserId', advertiserId)
            const localVarPath = `/walmart_campaign/video-management/{advertiser_id}/`
                .replace(`{${"advertiser_id"}}`, encodeURIComponent(String(advertiserId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {MediaDeleteReq} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignVideoManagementDeleteCreate: async (advertiserId: string, data: MediaDeleteReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'advertiserId' is not null or undefined
            assertParamExists('walmartCampaignVideoManagementDeleteCreate', 'advertiserId', advertiserId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('walmartCampaignVideoManagementDeleteCreate', 'data', data)
            const localVarPath = `/walmart_campaign/video-management/{advertiser_id}/delete`
                .replace(`{${"advertiser_id"}}`, encodeURIComponent(String(advertiserId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {GetMediaReq} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignVideoManagementListCreate: async (advertiserId: string, data: GetMediaReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'advertiserId' is not null or undefined
            assertParamExists('walmartCampaignVideoManagementListCreate', 'advertiserId', advertiserId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('walmartCampaignVideoManagementListCreate', 'data', data)
            const localVarPath = `/walmart_campaign/video-management/{advertiser_id}/list`
                .replace(`{${"advertiser_id"}}`, encodeURIComponent(String(advertiserId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {UpdateCaptionReq} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignVideoManagementUpdateCaptionCreate: async (advertiserId: string, data: UpdateCaptionReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'advertiserId' is not null or undefined
            assertParamExists('walmartCampaignVideoManagementUpdateCaptionCreate', 'advertiserId', advertiserId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('walmartCampaignVideoManagementUpdateCaptionCreate', 'data', data)
            const localVarPath = `/walmart_campaign/video-management/{advertiser_id}/update-caption`
                .replace(`{${"advertiser_id"}}`, encodeURIComponent(String(advertiserId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {UpdateMediaReq} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignVideoManagementUpdateCreate: async (advertiserId: string, data: UpdateMediaReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'advertiserId' is not null or undefined
            assertParamExists('walmartCampaignVideoManagementUpdateCreate', 'advertiserId', advertiserId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('walmartCampaignVideoManagementUpdateCreate', 'data', data)
            const localVarPath = `/walmart_campaign/video-management/{advertiser_id}/update`
                .replace(`{${"advertiser_id"}}`, encodeURIComponent(String(advertiserId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {VideoUploadReq} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignVideoManagementUploadCreate: async (advertiserId: string, data: VideoUploadReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'advertiserId' is not null or undefined
            assertParamExists('walmartCampaignVideoManagementUploadCreate', 'advertiserId', advertiserId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('walmartCampaignVideoManagementUploadCreate', 'data', data)
            const localVarPath = `/walmart_campaign/video-management/{advertiser_id}/upload`
                .replace(`{${"advertiser_id"}}`, encodeURIComponent(String(advertiserId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WalmartCampaignApi - functional programming interface
 * @export
 */
export const WalmartCampaignApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WalmartCampaignApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} advertiserId 
         * @param {CreateAdGroupReq} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walmartCampaignAdGroupCreateCreate(advertiserId: string, data: CreateAdGroupReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CreateAdGroup>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walmartCampaignAdGroupCreateCreate(advertiserId, data, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WalmartCampaignApi.walmartCampaignAdGroupCreateCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {ListAdGroupArgs} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walmartCampaignAdGroupListCreate(advertiserId: string, data: ListAdGroupArgs, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ListAdGroups>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walmartCampaignAdGroupListCreate(advertiserId, data, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WalmartCampaignApi.walmartCampaignAdGroupListCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {UpdateAdGroupReq} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walmartCampaignAdGroupUpdateUpdate(advertiserId: string, data: UpdateAdGroupReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UpdateAdGroup>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walmartCampaignAdGroupUpdateUpdate(advertiserId, data, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WalmartCampaignApi.walmartCampaignAdGroupUpdateUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {AddAdItemToAdGroupReq} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walmartCampaignAdItemAddCreate(advertiserId: string, data: AddAdItemToAdGroupReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AddAdItemToAdGroup>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walmartCampaignAdItemAddCreate(advertiserId, data, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WalmartCampaignApi.walmartCampaignAdItemAddCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {string} campaignId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walmartCampaignAdItemListRead(advertiserId: string, campaignId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CampaignAdItemList>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walmartCampaignAdItemListRead(advertiserId, campaignId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WalmartCampaignApi.walmartCampaignAdItemListRead']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {UpdateAdItemReq} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walmartCampaignAdItemUpdateUpdate(advertiserId: string, data: UpdateAdItemReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UpdateAdItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walmartCampaignAdItemUpdateUpdate(advertiserId, data, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WalmartCampaignApi.walmartCampaignAdItemUpdateUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {string} campaignId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walmartCampaignAdPlacementListCreate(advertiserId: string, campaignId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SponsoredBrand>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walmartCampaignAdPlacementListCreate(advertiserId, campaignId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WalmartCampaignApi.walmartCampaignAdPlacementListCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {SubmitPlacementReq} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walmartCampaignAdPlacementUpdateUpdate(advertiserId: string, data: SubmitPlacementReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SubmitPlacementResp>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walmartCampaignAdPlacementUpdateUpdate(advertiserId, data, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WalmartCampaignApi.walmartCampaignAdPlacementUpdateUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {Array<BidPlacement>} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walmartCampaignBidCreateCreate(advertiserId: string, data: Array<BidPlacement>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CreateBidPlacementResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walmartCampaignBidCreateCreate(advertiserId, data, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WalmartCampaignApi.walmartCampaignBidCreateCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {string} campaignId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walmartCampaignBidListRead(advertiserId: string, campaignId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BidPlacement>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walmartCampaignBidListRead(advertiserId, campaignId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WalmartCampaignApi.walmartCampaignBidListRead']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {Array<BidPlatform>} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walmartCampaignBidPlatformCreateCreate(advertiserId: string, data: Array<BidPlatform>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CreateBidPlatformResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walmartCampaignBidPlatformCreateCreate(advertiserId, data, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WalmartCampaignApi.walmartCampaignBidPlatformCreateCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {string} campaignId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walmartCampaignBidPlatformListRead(advertiserId: string, campaignId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BidPlatform>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walmartCampaignBidPlatformListRead(advertiserId, campaignId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WalmartCampaignApi.walmartCampaignBidPlatformListRead']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {BidPlatform} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walmartCampaignBidPlatformUpdateUpdate(advertiserId: string, data: BidPlatform, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CreateBidPlatformResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walmartCampaignBidPlatformUpdateUpdate(advertiserId, data, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WalmartCampaignApi.walmartCampaignBidPlatformUpdateUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {BidPlacement} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walmartCampaignBidUpdateUpdate(advertiserId: string, data: BidPlacement, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CreateBidPlacementResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walmartCampaignBidUpdateUpdate(advertiserId, data, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WalmartCampaignApi.walmartCampaignBidUpdateUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {CreateCampaignReq} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walmartCampaignCreateCreate(advertiserId: string, data: CreateCampaignReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CreateCampaign>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walmartCampaignCreateCreate(advertiserId, data, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WalmartCampaignApi.walmartCampaignCreateCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {DeleteCampaignReq} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walmartCampaignDeleteUpdate(advertiserId: string, data: DeleteCampaignReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DeleteCampaign>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walmartCampaignDeleteUpdate(advertiserId, data, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WalmartCampaignApi.walmartCampaignDeleteUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {string} searchText 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walmartCampaignItemsSearchRead(advertiserId: string, searchText: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SearchItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walmartCampaignItemsSearchRead(advertiserId, searchText, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WalmartCampaignApi.walmartCampaignItemsSearchRead']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {AddKeywordReq} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walmartCampaignKeywordsAddCreate(advertiserId: string, data: AddKeywordReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AddKeyword>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walmartCampaignKeywordsAddCreate(advertiserId, data, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WalmartCampaignApi.walmartCampaignKeywordsAddCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {GetKeywordAnalyticsReq} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walmartCampaignKeywordsAnalyticsCreate(advertiserId: string, data: GetKeywordAnalyticsReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetKeywordAnalytics>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walmartCampaignKeywordsAnalyticsCreate(advertiserId, data, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WalmartCampaignApi.walmartCampaignKeywordsAnalyticsCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {string} campaignId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walmartCampaignKeywordsListRead(advertiserId: string, campaignId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ListKeywordsInCampaign>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walmartCampaignKeywordsListRead(advertiserId, campaignId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WalmartCampaignApi.walmartCampaignKeywordsListRead']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {string} adGroupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walmartCampaignKeywordsSuggestedRead(advertiserId: string, adGroupId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SuggestedKeywords>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walmartCampaignKeywordsSuggestedRead(advertiserId, adGroupId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WalmartCampaignApi.walmartCampaignKeywordsSuggestedRead']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {UpdateKeywordReq} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walmartCampaignKeywordsUpdateUpdate(advertiserId: string, data: UpdateKeywordReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UpdateKeyword>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walmartCampaignKeywordsUpdateUpdate(advertiserId, data, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WalmartCampaignApi.walmartCampaignKeywordsUpdateUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {CampaignListFilter} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walmartCampaignListCreate(data: CampaignListFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Campaign>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walmartCampaignListCreate(data, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WalmartCampaignApi.walmartCampaignListCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {ListSponsoredBrandRequest} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walmartCampaignSponsoredBrandCreate(advertiserId: string, data: ListSponsoredBrandRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SponsoredBrand>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walmartCampaignSponsoredBrandCreate(advertiserId, data, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WalmartCampaignApi.walmartCampaignSponsoredBrandCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {Array<CreateSponsoredBrandRequest>} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walmartCampaignSponsoredBrandCreateCreate(advertiserId: string, data: Array<CreateSponsoredBrandRequest>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CreateSponsoredBrandResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walmartCampaignSponsoredBrandCreateCreate(advertiserId, data, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WalmartCampaignApi.walmartCampaignSponsoredBrandCreateCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {SPAReviewCancelReq} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walmartCampaignSponsoredBrandReviewCancelUpdate(advertiserId: string, data: SPAReviewCancelReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SPAReviewCancelResp>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walmartCampaignSponsoredBrandReviewCancelUpdate(advertiserId, data, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WalmartCampaignApi.walmartCampaignSponsoredBrandReviewCancelUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {string} adGroupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walmartCampaignSponsoredBrandReviewListRead(advertiserId: string, adGroupId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SponsoredBrand>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walmartCampaignSponsoredBrandReviewListRead(advertiserId, adGroupId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WalmartCampaignApi.walmartCampaignSponsoredBrandReviewListRead']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {SPAReviewSubmitReq} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walmartCampaignSponsoredBrandReviewSubmitCreate(advertiserId: string, data: SPAReviewSubmitReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SPAReviewSubmitResp>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walmartCampaignSponsoredBrandReviewSubmitCreate(advertiserId, data, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WalmartCampaignApi.walmartCampaignSponsoredBrandReviewSubmitCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {UpdateSponsoredBrandRequest} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walmartCampaignSponsoredBrandUpdateUpdate(advertiserId: string, data: UpdateSponsoredBrandRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CreateSponsoredBrandResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walmartCampaignSponsoredBrandUpdateUpdate(advertiserId, data, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WalmartCampaignApi.walmartCampaignSponsoredBrandUpdateUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {UploadSponsoredBrandLogoRequest} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walmartCampaignSponsoredBrandUploadCreate(advertiserId: string, data: UploadSponsoredBrandLogoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CreateSponsoredBrandResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walmartCampaignSponsoredBrandUploadCreate(advertiserId, data, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WalmartCampaignApi.walmartCampaignSponsoredBrandUploadCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {string} campaignId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walmartCampaignStatsRead(advertiserId: string, campaignId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CampaignStats>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walmartCampaignStatsRead(advertiserId, campaignId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WalmartCampaignApi.walmartCampaignStatsRead']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {Array<CreateSVAdGroupArgs>} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walmartCampaignSvAdGroupCreateCreate(advertiserId: string, data: Array<CreateSVAdGroupArgs>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CreateSVAdGroupResp>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walmartCampaignSvAdGroupCreateCreate(advertiserId, data, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WalmartCampaignApi.walmartCampaignSvAdGroupCreateCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {ListSVAdGroupArgs} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walmartCampaignSvAdGroupListCreate(advertiserId: string, data: ListSVAdGroupArgs, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ListSVAdGroups>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walmartCampaignSvAdGroupListCreate(advertiserId, data, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WalmartCampaignApi.walmartCampaignSvAdGroupListCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {Array<UpdateSVAdGroupArgs>} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walmartCampaignSvAdGroupUpdateUpdate(advertiserId: string, data: Array<UpdateSVAdGroupArgs>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UpdateSVAdGroup>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walmartCampaignSvAdGroupUpdateUpdate(advertiserId, data, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WalmartCampaignApi.walmartCampaignSvAdGroupUpdateUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {UpdateCampaignReq} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walmartCampaignUpdateUpdate(advertiserId: string, data: UpdateCampaignReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UpdateCampaign>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walmartCampaignUpdateUpdate(advertiserId, data, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WalmartCampaignApi.walmartCampaignUpdateUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {UploadCompleteReq} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walmartCampaignVideoManagementCompleteCreate(advertiserId: string, data: UploadCompleteReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadCompleteResp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walmartCampaignVideoManagementCompleteCreate(advertiserId, data, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WalmartCampaignApi.walmartCampaignVideoManagementCompleteCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walmartCampaignVideoManagementCreate(advertiserId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VideoUploadCreateLinkResp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walmartCampaignVideoManagementCreate(advertiserId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WalmartCampaignApi.walmartCampaignVideoManagementCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {MediaDeleteReq} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walmartCampaignVideoManagementDeleteCreate(advertiserId: string, data: MediaDeleteReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MediaDeleteResp>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walmartCampaignVideoManagementDeleteCreate(advertiserId, data, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WalmartCampaignApi.walmartCampaignVideoManagementDeleteCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {GetMediaReq} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walmartCampaignVideoManagementListCreate(advertiserId: string, data: GetMediaReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetMediaResp>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walmartCampaignVideoManagementListCreate(advertiserId, data, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WalmartCampaignApi.walmartCampaignVideoManagementListCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {UpdateCaptionReq} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walmartCampaignVideoManagementUpdateCaptionCreate(advertiserId: string, data: UpdateCaptionReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UpdateCaptionResp>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walmartCampaignVideoManagementUpdateCaptionCreate(advertiserId, data, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WalmartCampaignApi.walmartCampaignVideoManagementUpdateCaptionCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {UpdateMediaReq} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walmartCampaignVideoManagementUpdateCreate(advertiserId: string, data: UpdateMediaReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MediaUpdateResp>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walmartCampaignVideoManagementUpdateCreate(advertiserId, data, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WalmartCampaignApi.walmartCampaignVideoManagementUpdateCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} advertiserId 
         * @param {VideoUploadReq} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walmartCampaignVideoManagementUploadCreate(advertiserId: string, data: VideoUploadReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VideoUploadResp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walmartCampaignVideoManagementUploadCreate(advertiserId, data, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WalmartCampaignApi.walmartCampaignVideoManagementUploadCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * WalmartCampaignApi - factory interface
 * @export
 */
export const WalmartCampaignApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WalmartCampaignApiFp(configuration)
    return {
        /**
         * 
         * @param {WalmartCampaignApiWalmartCampaignAdGroupCreateCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignAdGroupCreateCreate(requestParameters: WalmartCampaignApiWalmartCampaignAdGroupCreateCreateRequest, options?: AxiosRequestConfig): AxiosPromise<Array<CreateAdGroup>> {
            return localVarFp.walmartCampaignAdGroupCreateCreate(requestParameters.advertiserId, requestParameters.data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WalmartCampaignApiWalmartCampaignAdGroupListCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignAdGroupListCreate(requestParameters: WalmartCampaignApiWalmartCampaignAdGroupListCreateRequest, options?: AxiosRequestConfig): AxiosPromise<Array<ListAdGroups>> {
            return localVarFp.walmartCampaignAdGroupListCreate(requestParameters.advertiserId, requestParameters.data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WalmartCampaignApiWalmartCampaignAdGroupUpdateUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignAdGroupUpdateUpdate(requestParameters: WalmartCampaignApiWalmartCampaignAdGroupUpdateUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<Array<UpdateAdGroup>> {
            return localVarFp.walmartCampaignAdGroupUpdateUpdate(requestParameters.advertiserId, requestParameters.data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WalmartCampaignApiWalmartCampaignAdItemAddCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignAdItemAddCreate(requestParameters: WalmartCampaignApiWalmartCampaignAdItemAddCreateRequest, options?: AxiosRequestConfig): AxiosPromise<Array<AddAdItemToAdGroup>> {
            return localVarFp.walmartCampaignAdItemAddCreate(requestParameters.advertiserId, requestParameters.data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WalmartCampaignApiWalmartCampaignAdItemListReadRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignAdItemListRead(requestParameters: WalmartCampaignApiWalmartCampaignAdItemListReadRequest, options?: AxiosRequestConfig): AxiosPromise<Array<CampaignAdItemList>> {
            return localVarFp.walmartCampaignAdItemListRead(requestParameters.advertiserId, requestParameters.campaignId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WalmartCampaignApiWalmartCampaignAdItemUpdateUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignAdItemUpdateUpdate(requestParameters: WalmartCampaignApiWalmartCampaignAdItemUpdateUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<Array<UpdateAdItem>> {
            return localVarFp.walmartCampaignAdItemUpdateUpdate(requestParameters.advertiserId, requestParameters.data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WalmartCampaignApiWalmartCampaignAdPlacementListCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignAdPlacementListCreate(requestParameters: WalmartCampaignApiWalmartCampaignAdPlacementListCreateRequest, options?: AxiosRequestConfig): AxiosPromise<Array<SponsoredBrand>> {
            return localVarFp.walmartCampaignAdPlacementListCreate(requestParameters.advertiserId, requestParameters.campaignId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WalmartCampaignApiWalmartCampaignAdPlacementUpdateUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignAdPlacementUpdateUpdate(requestParameters: WalmartCampaignApiWalmartCampaignAdPlacementUpdateUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<Array<SubmitPlacementResp>> {
            return localVarFp.walmartCampaignAdPlacementUpdateUpdate(requestParameters.advertiserId, requestParameters.data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WalmartCampaignApiWalmartCampaignBidCreateCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignBidCreateCreate(requestParameters: WalmartCampaignApiWalmartCampaignBidCreateCreateRequest, options?: AxiosRequestConfig): AxiosPromise<Array<CreateBidPlacementResponse>> {
            return localVarFp.walmartCampaignBidCreateCreate(requestParameters.advertiserId, requestParameters.data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WalmartCampaignApiWalmartCampaignBidListReadRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignBidListRead(requestParameters: WalmartCampaignApiWalmartCampaignBidListReadRequest, options?: AxiosRequestConfig): AxiosPromise<Array<BidPlacement>> {
            return localVarFp.walmartCampaignBidListRead(requestParameters.advertiserId, requestParameters.campaignId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WalmartCampaignApiWalmartCampaignBidPlatformCreateCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignBidPlatformCreateCreate(requestParameters: WalmartCampaignApiWalmartCampaignBidPlatformCreateCreateRequest, options?: AxiosRequestConfig): AxiosPromise<Array<CreateBidPlatformResponse>> {
            return localVarFp.walmartCampaignBidPlatformCreateCreate(requestParameters.advertiserId, requestParameters.data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WalmartCampaignApiWalmartCampaignBidPlatformListReadRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignBidPlatformListRead(requestParameters: WalmartCampaignApiWalmartCampaignBidPlatformListReadRequest, options?: AxiosRequestConfig): AxiosPromise<Array<BidPlatform>> {
            return localVarFp.walmartCampaignBidPlatformListRead(requestParameters.advertiserId, requestParameters.campaignId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WalmartCampaignApiWalmartCampaignBidPlatformUpdateUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignBidPlatformUpdateUpdate(requestParameters: WalmartCampaignApiWalmartCampaignBidPlatformUpdateUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<Array<CreateBidPlatformResponse>> {
            return localVarFp.walmartCampaignBidPlatformUpdateUpdate(requestParameters.advertiserId, requestParameters.data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WalmartCampaignApiWalmartCampaignBidUpdateUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignBidUpdateUpdate(requestParameters: WalmartCampaignApiWalmartCampaignBidUpdateUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<Array<CreateBidPlacementResponse>> {
            return localVarFp.walmartCampaignBidUpdateUpdate(requestParameters.advertiserId, requestParameters.data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WalmartCampaignApiWalmartCampaignCreateCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignCreateCreate(requestParameters: WalmartCampaignApiWalmartCampaignCreateCreateRequest, options?: AxiosRequestConfig): AxiosPromise<Array<CreateCampaign>> {
            return localVarFp.walmartCampaignCreateCreate(requestParameters.advertiserId, requestParameters.data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WalmartCampaignApiWalmartCampaignDeleteUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignDeleteUpdate(requestParameters: WalmartCampaignApiWalmartCampaignDeleteUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<Array<DeleteCampaign>> {
            return localVarFp.walmartCampaignDeleteUpdate(requestParameters.advertiserId, requestParameters.data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WalmartCampaignApiWalmartCampaignItemsSearchReadRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignItemsSearchRead(requestParameters: WalmartCampaignApiWalmartCampaignItemsSearchReadRequest, options?: AxiosRequestConfig): AxiosPromise<Array<SearchItem>> {
            return localVarFp.walmartCampaignItemsSearchRead(requestParameters.advertiserId, requestParameters.searchText, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WalmartCampaignApiWalmartCampaignKeywordsAddCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignKeywordsAddCreate(requestParameters: WalmartCampaignApiWalmartCampaignKeywordsAddCreateRequest, options?: AxiosRequestConfig): AxiosPromise<Array<AddKeyword>> {
            return localVarFp.walmartCampaignKeywordsAddCreate(requestParameters.advertiserId, requestParameters.data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WalmartCampaignApiWalmartCampaignKeywordsAnalyticsCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignKeywordsAnalyticsCreate(requestParameters: WalmartCampaignApiWalmartCampaignKeywordsAnalyticsCreateRequest, options?: AxiosRequestConfig): AxiosPromise<Array<GetKeywordAnalytics>> {
            return localVarFp.walmartCampaignKeywordsAnalyticsCreate(requestParameters.advertiserId, requestParameters.data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WalmartCampaignApiWalmartCampaignKeywordsListReadRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignKeywordsListRead(requestParameters: WalmartCampaignApiWalmartCampaignKeywordsListReadRequest, options?: AxiosRequestConfig): AxiosPromise<Array<ListKeywordsInCampaign>> {
            return localVarFp.walmartCampaignKeywordsListRead(requestParameters.advertiserId, requestParameters.campaignId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WalmartCampaignApiWalmartCampaignKeywordsSuggestedReadRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignKeywordsSuggestedRead(requestParameters: WalmartCampaignApiWalmartCampaignKeywordsSuggestedReadRequest, options?: AxiosRequestConfig): AxiosPromise<Array<SuggestedKeywords>> {
            return localVarFp.walmartCampaignKeywordsSuggestedRead(requestParameters.advertiserId, requestParameters.adGroupId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WalmartCampaignApiWalmartCampaignKeywordsUpdateUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignKeywordsUpdateUpdate(requestParameters: WalmartCampaignApiWalmartCampaignKeywordsUpdateUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<Array<UpdateKeyword>> {
            return localVarFp.walmartCampaignKeywordsUpdateUpdate(requestParameters.advertiserId, requestParameters.data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WalmartCampaignApiWalmartCampaignListCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignListCreate(requestParameters: WalmartCampaignApiWalmartCampaignListCreateRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Campaign>> {
            return localVarFp.walmartCampaignListCreate(requestParameters.data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WalmartCampaignApiWalmartCampaignSponsoredBrandCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignSponsoredBrandCreate(requestParameters: WalmartCampaignApiWalmartCampaignSponsoredBrandCreateRequest, options?: AxiosRequestConfig): AxiosPromise<Array<SponsoredBrand>> {
            return localVarFp.walmartCampaignSponsoredBrandCreate(requestParameters.advertiserId, requestParameters.data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WalmartCampaignApiWalmartCampaignSponsoredBrandCreateCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignSponsoredBrandCreateCreate(requestParameters: WalmartCampaignApiWalmartCampaignSponsoredBrandCreateCreateRequest, options?: AxiosRequestConfig): AxiosPromise<Array<CreateSponsoredBrandResponse>> {
            return localVarFp.walmartCampaignSponsoredBrandCreateCreate(requestParameters.advertiserId, requestParameters.data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WalmartCampaignApiWalmartCampaignSponsoredBrandReviewCancelUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignSponsoredBrandReviewCancelUpdate(requestParameters: WalmartCampaignApiWalmartCampaignSponsoredBrandReviewCancelUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<Array<SPAReviewCancelResp>> {
            return localVarFp.walmartCampaignSponsoredBrandReviewCancelUpdate(requestParameters.advertiserId, requestParameters.data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WalmartCampaignApiWalmartCampaignSponsoredBrandReviewListReadRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignSponsoredBrandReviewListRead(requestParameters: WalmartCampaignApiWalmartCampaignSponsoredBrandReviewListReadRequest, options?: AxiosRequestConfig): AxiosPromise<Array<SponsoredBrand>> {
            return localVarFp.walmartCampaignSponsoredBrandReviewListRead(requestParameters.advertiserId, requestParameters.adGroupId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WalmartCampaignApiWalmartCampaignSponsoredBrandReviewSubmitCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignSponsoredBrandReviewSubmitCreate(requestParameters: WalmartCampaignApiWalmartCampaignSponsoredBrandReviewSubmitCreateRequest, options?: AxiosRequestConfig): AxiosPromise<Array<SPAReviewSubmitResp>> {
            return localVarFp.walmartCampaignSponsoredBrandReviewSubmitCreate(requestParameters.advertiserId, requestParameters.data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WalmartCampaignApiWalmartCampaignSponsoredBrandUpdateUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignSponsoredBrandUpdateUpdate(requestParameters: WalmartCampaignApiWalmartCampaignSponsoredBrandUpdateUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<Array<CreateSponsoredBrandResponse>> {
            return localVarFp.walmartCampaignSponsoredBrandUpdateUpdate(requestParameters.advertiserId, requestParameters.data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WalmartCampaignApiWalmartCampaignSponsoredBrandUploadCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignSponsoredBrandUploadCreate(requestParameters: WalmartCampaignApiWalmartCampaignSponsoredBrandUploadCreateRequest, options?: AxiosRequestConfig): AxiosPromise<Array<CreateSponsoredBrandResponse>> {
            return localVarFp.walmartCampaignSponsoredBrandUploadCreate(requestParameters.advertiserId, requestParameters.data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WalmartCampaignApiWalmartCampaignStatsReadRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignStatsRead(requestParameters: WalmartCampaignApiWalmartCampaignStatsReadRequest, options?: AxiosRequestConfig): AxiosPromise<Array<CampaignStats>> {
            return localVarFp.walmartCampaignStatsRead(requestParameters.advertiserId, requestParameters.campaignId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WalmartCampaignApiWalmartCampaignSvAdGroupCreateCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignSvAdGroupCreateCreate(requestParameters: WalmartCampaignApiWalmartCampaignSvAdGroupCreateCreateRequest, options?: AxiosRequestConfig): AxiosPromise<Array<CreateSVAdGroupResp>> {
            return localVarFp.walmartCampaignSvAdGroupCreateCreate(requestParameters.advertiserId, requestParameters.data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WalmartCampaignApiWalmartCampaignSvAdGroupListCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignSvAdGroupListCreate(requestParameters: WalmartCampaignApiWalmartCampaignSvAdGroupListCreateRequest, options?: AxiosRequestConfig): AxiosPromise<Array<ListSVAdGroups>> {
            return localVarFp.walmartCampaignSvAdGroupListCreate(requestParameters.advertiserId, requestParameters.data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WalmartCampaignApiWalmartCampaignSvAdGroupUpdateUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignSvAdGroupUpdateUpdate(requestParameters: WalmartCampaignApiWalmartCampaignSvAdGroupUpdateUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<Array<UpdateSVAdGroup>> {
            return localVarFp.walmartCampaignSvAdGroupUpdateUpdate(requestParameters.advertiserId, requestParameters.data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WalmartCampaignApiWalmartCampaignUpdateUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignUpdateUpdate(requestParameters: WalmartCampaignApiWalmartCampaignUpdateUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<Array<UpdateCampaign>> {
            return localVarFp.walmartCampaignUpdateUpdate(requestParameters.advertiserId, requestParameters.data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WalmartCampaignApiWalmartCampaignVideoManagementCompleteCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignVideoManagementCompleteCreate(requestParameters: WalmartCampaignApiWalmartCampaignVideoManagementCompleteCreateRequest, options?: AxiosRequestConfig): AxiosPromise<UploadCompleteResp> {
            return localVarFp.walmartCampaignVideoManagementCompleteCreate(requestParameters.advertiserId, requestParameters.data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WalmartCampaignApiWalmartCampaignVideoManagementCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignVideoManagementCreate(requestParameters: WalmartCampaignApiWalmartCampaignVideoManagementCreateRequest, options?: AxiosRequestConfig): AxiosPromise<VideoUploadCreateLinkResp> {
            return localVarFp.walmartCampaignVideoManagementCreate(requestParameters.advertiserId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WalmartCampaignApiWalmartCampaignVideoManagementDeleteCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignVideoManagementDeleteCreate(requestParameters: WalmartCampaignApiWalmartCampaignVideoManagementDeleteCreateRequest, options?: AxiosRequestConfig): AxiosPromise<Array<MediaDeleteResp>> {
            return localVarFp.walmartCampaignVideoManagementDeleteCreate(requestParameters.advertiserId, requestParameters.data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WalmartCampaignApiWalmartCampaignVideoManagementListCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignVideoManagementListCreate(requestParameters: WalmartCampaignApiWalmartCampaignVideoManagementListCreateRequest, options?: AxiosRequestConfig): AxiosPromise<Array<GetMediaResp>> {
            return localVarFp.walmartCampaignVideoManagementListCreate(requestParameters.advertiserId, requestParameters.data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WalmartCampaignApiWalmartCampaignVideoManagementUpdateCaptionCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignVideoManagementUpdateCaptionCreate(requestParameters: WalmartCampaignApiWalmartCampaignVideoManagementUpdateCaptionCreateRequest, options?: AxiosRequestConfig): AxiosPromise<Array<UpdateCaptionResp>> {
            return localVarFp.walmartCampaignVideoManagementUpdateCaptionCreate(requestParameters.advertiserId, requestParameters.data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WalmartCampaignApiWalmartCampaignVideoManagementUpdateCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignVideoManagementUpdateCreate(requestParameters: WalmartCampaignApiWalmartCampaignVideoManagementUpdateCreateRequest, options?: AxiosRequestConfig): AxiosPromise<Array<MediaUpdateResp>> {
            return localVarFp.walmartCampaignVideoManagementUpdateCreate(requestParameters.advertiserId, requestParameters.data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WalmartCampaignApiWalmartCampaignVideoManagementUploadCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walmartCampaignVideoManagementUploadCreate(requestParameters: WalmartCampaignApiWalmartCampaignVideoManagementUploadCreateRequest, options?: AxiosRequestConfig): AxiosPromise<VideoUploadResp> {
            return localVarFp.walmartCampaignVideoManagementUploadCreate(requestParameters.advertiserId, requestParameters.data, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for walmartCampaignAdGroupCreateCreate operation in WalmartCampaignApi.
 * @export
 * @interface WalmartCampaignApiWalmartCampaignAdGroupCreateCreateRequest
 */
export interface WalmartCampaignApiWalmartCampaignAdGroupCreateCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof WalmartCampaignApiWalmartCampaignAdGroupCreateCreate
     */
    readonly advertiserId: string

    /**
     * 
     * @type {CreateAdGroupReq}
     * @memberof WalmartCampaignApiWalmartCampaignAdGroupCreateCreate
     */
    readonly data: CreateAdGroupReq
}

/**
 * Request parameters for walmartCampaignAdGroupListCreate operation in WalmartCampaignApi.
 * @export
 * @interface WalmartCampaignApiWalmartCampaignAdGroupListCreateRequest
 */
export interface WalmartCampaignApiWalmartCampaignAdGroupListCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof WalmartCampaignApiWalmartCampaignAdGroupListCreate
     */
    readonly advertiserId: string

    /**
     * 
     * @type {ListAdGroupArgs}
     * @memberof WalmartCampaignApiWalmartCampaignAdGroupListCreate
     */
    readonly data: ListAdGroupArgs
}

/**
 * Request parameters for walmartCampaignAdGroupUpdateUpdate operation in WalmartCampaignApi.
 * @export
 * @interface WalmartCampaignApiWalmartCampaignAdGroupUpdateUpdateRequest
 */
export interface WalmartCampaignApiWalmartCampaignAdGroupUpdateUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof WalmartCampaignApiWalmartCampaignAdGroupUpdateUpdate
     */
    readonly advertiserId: string

    /**
     * 
     * @type {UpdateAdGroupReq}
     * @memberof WalmartCampaignApiWalmartCampaignAdGroupUpdateUpdate
     */
    readonly data: UpdateAdGroupReq
}

/**
 * Request parameters for walmartCampaignAdItemAddCreate operation in WalmartCampaignApi.
 * @export
 * @interface WalmartCampaignApiWalmartCampaignAdItemAddCreateRequest
 */
export interface WalmartCampaignApiWalmartCampaignAdItemAddCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof WalmartCampaignApiWalmartCampaignAdItemAddCreate
     */
    readonly advertiserId: string

    /**
     * 
     * @type {AddAdItemToAdGroupReq}
     * @memberof WalmartCampaignApiWalmartCampaignAdItemAddCreate
     */
    readonly data: AddAdItemToAdGroupReq
}

/**
 * Request parameters for walmartCampaignAdItemListRead operation in WalmartCampaignApi.
 * @export
 * @interface WalmartCampaignApiWalmartCampaignAdItemListReadRequest
 */
export interface WalmartCampaignApiWalmartCampaignAdItemListReadRequest {
    /**
     * 
     * @type {string}
     * @memberof WalmartCampaignApiWalmartCampaignAdItemListRead
     */
    readonly advertiserId: string

    /**
     * 
     * @type {string}
     * @memberof WalmartCampaignApiWalmartCampaignAdItemListRead
     */
    readonly campaignId: string
}

/**
 * Request parameters for walmartCampaignAdItemUpdateUpdate operation in WalmartCampaignApi.
 * @export
 * @interface WalmartCampaignApiWalmartCampaignAdItemUpdateUpdateRequest
 */
export interface WalmartCampaignApiWalmartCampaignAdItemUpdateUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof WalmartCampaignApiWalmartCampaignAdItemUpdateUpdate
     */
    readonly advertiserId: string

    /**
     * 
     * @type {UpdateAdItemReq}
     * @memberof WalmartCampaignApiWalmartCampaignAdItemUpdateUpdate
     */
    readonly data: UpdateAdItemReq
}

/**
 * Request parameters for walmartCampaignAdPlacementListCreate operation in WalmartCampaignApi.
 * @export
 * @interface WalmartCampaignApiWalmartCampaignAdPlacementListCreateRequest
 */
export interface WalmartCampaignApiWalmartCampaignAdPlacementListCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof WalmartCampaignApiWalmartCampaignAdPlacementListCreate
     */
    readonly advertiserId: string

    /**
     * 
     * @type {string}
     * @memberof WalmartCampaignApiWalmartCampaignAdPlacementListCreate
     */
    readonly campaignId: string
}

/**
 * Request parameters for walmartCampaignAdPlacementUpdateUpdate operation in WalmartCampaignApi.
 * @export
 * @interface WalmartCampaignApiWalmartCampaignAdPlacementUpdateUpdateRequest
 */
export interface WalmartCampaignApiWalmartCampaignAdPlacementUpdateUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof WalmartCampaignApiWalmartCampaignAdPlacementUpdateUpdate
     */
    readonly advertiserId: string

    /**
     * 
     * @type {SubmitPlacementReq}
     * @memberof WalmartCampaignApiWalmartCampaignAdPlacementUpdateUpdate
     */
    readonly data: SubmitPlacementReq
}

/**
 * Request parameters for walmartCampaignBidCreateCreate operation in WalmartCampaignApi.
 * @export
 * @interface WalmartCampaignApiWalmartCampaignBidCreateCreateRequest
 */
export interface WalmartCampaignApiWalmartCampaignBidCreateCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof WalmartCampaignApiWalmartCampaignBidCreateCreate
     */
    readonly advertiserId: string

    /**
     * 
     * @type {Array<BidPlacement>}
     * @memberof WalmartCampaignApiWalmartCampaignBidCreateCreate
     */
    readonly data: Array<BidPlacement>
}

/**
 * Request parameters for walmartCampaignBidListRead operation in WalmartCampaignApi.
 * @export
 * @interface WalmartCampaignApiWalmartCampaignBidListReadRequest
 */
export interface WalmartCampaignApiWalmartCampaignBidListReadRequest {
    /**
     * 
     * @type {string}
     * @memberof WalmartCampaignApiWalmartCampaignBidListRead
     */
    readonly advertiserId: string

    /**
     * 
     * @type {string}
     * @memberof WalmartCampaignApiWalmartCampaignBidListRead
     */
    readonly campaignId: string
}

/**
 * Request parameters for walmartCampaignBidPlatformCreateCreate operation in WalmartCampaignApi.
 * @export
 * @interface WalmartCampaignApiWalmartCampaignBidPlatformCreateCreateRequest
 */
export interface WalmartCampaignApiWalmartCampaignBidPlatformCreateCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof WalmartCampaignApiWalmartCampaignBidPlatformCreateCreate
     */
    readonly advertiserId: string

    /**
     * 
     * @type {Array<BidPlatform>}
     * @memberof WalmartCampaignApiWalmartCampaignBidPlatformCreateCreate
     */
    readonly data: Array<BidPlatform>
}

/**
 * Request parameters for walmartCampaignBidPlatformListRead operation in WalmartCampaignApi.
 * @export
 * @interface WalmartCampaignApiWalmartCampaignBidPlatformListReadRequest
 */
export interface WalmartCampaignApiWalmartCampaignBidPlatformListReadRequest {
    /**
     * 
     * @type {string}
     * @memberof WalmartCampaignApiWalmartCampaignBidPlatformListRead
     */
    readonly advertiserId: string

    /**
     * 
     * @type {string}
     * @memberof WalmartCampaignApiWalmartCampaignBidPlatformListRead
     */
    readonly campaignId: string
}

/**
 * Request parameters for walmartCampaignBidPlatformUpdateUpdate operation in WalmartCampaignApi.
 * @export
 * @interface WalmartCampaignApiWalmartCampaignBidPlatformUpdateUpdateRequest
 */
export interface WalmartCampaignApiWalmartCampaignBidPlatformUpdateUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof WalmartCampaignApiWalmartCampaignBidPlatformUpdateUpdate
     */
    readonly advertiserId: string

    /**
     * 
     * @type {BidPlatform}
     * @memberof WalmartCampaignApiWalmartCampaignBidPlatformUpdateUpdate
     */
    readonly data: BidPlatform
}

/**
 * Request parameters for walmartCampaignBidUpdateUpdate operation in WalmartCampaignApi.
 * @export
 * @interface WalmartCampaignApiWalmartCampaignBidUpdateUpdateRequest
 */
export interface WalmartCampaignApiWalmartCampaignBidUpdateUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof WalmartCampaignApiWalmartCampaignBidUpdateUpdate
     */
    readonly advertiserId: string

    /**
     * 
     * @type {BidPlacement}
     * @memberof WalmartCampaignApiWalmartCampaignBidUpdateUpdate
     */
    readonly data: BidPlacement
}

/**
 * Request parameters for walmartCampaignCreateCreate operation in WalmartCampaignApi.
 * @export
 * @interface WalmartCampaignApiWalmartCampaignCreateCreateRequest
 */
export interface WalmartCampaignApiWalmartCampaignCreateCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof WalmartCampaignApiWalmartCampaignCreateCreate
     */
    readonly advertiserId: string

    /**
     * 
     * @type {CreateCampaignReq}
     * @memberof WalmartCampaignApiWalmartCampaignCreateCreate
     */
    readonly data: CreateCampaignReq
}

/**
 * Request parameters for walmartCampaignDeleteUpdate operation in WalmartCampaignApi.
 * @export
 * @interface WalmartCampaignApiWalmartCampaignDeleteUpdateRequest
 */
export interface WalmartCampaignApiWalmartCampaignDeleteUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof WalmartCampaignApiWalmartCampaignDeleteUpdate
     */
    readonly advertiserId: string

    /**
     * 
     * @type {DeleteCampaignReq}
     * @memberof WalmartCampaignApiWalmartCampaignDeleteUpdate
     */
    readonly data: DeleteCampaignReq
}

/**
 * Request parameters for walmartCampaignItemsSearchRead operation in WalmartCampaignApi.
 * @export
 * @interface WalmartCampaignApiWalmartCampaignItemsSearchReadRequest
 */
export interface WalmartCampaignApiWalmartCampaignItemsSearchReadRequest {
    /**
     * 
     * @type {string}
     * @memberof WalmartCampaignApiWalmartCampaignItemsSearchRead
     */
    readonly advertiserId: string

    /**
     * 
     * @type {string}
     * @memberof WalmartCampaignApiWalmartCampaignItemsSearchRead
     */
    readonly searchText: string
}

/**
 * Request parameters for walmartCampaignKeywordsAddCreate operation in WalmartCampaignApi.
 * @export
 * @interface WalmartCampaignApiWalmartCampaignKeywordsAddCreateRequest
 */
export interface WalmartCampaignApiWalmartCampaignKeywordsAddCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof WalmartCampaignApiWalmartCampaignKeywordsAddCreate
     */
    readonly advertiserId: string

    /**
     * 
     * @type {AddKeywordReq}
     * @memberof WalmartCampaignApiWalmartCampaignKeywordsAddCreate
     */
    readonly data: AddKeywordReq
}

/**
 * Request parameters for walmartCampaignKeywordsAnalyticsCreate operation in WalmartCampaignApi.
 * @export
 * @interface WalmartCampaignApiWalmartCampaignKeywordsAnalyticsCreateRequest
 */
export interface WalmartCampaignApiWalmartCampaignKeywordsAnalyticsCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof WalmartCampaignApiWalmartCampaignKeywordsAnalyticsCreate
     */
    readonly advertiserId: string

    /**
     * 
     * @type {GetKeywordAnalyticsReq}
     * @memberof WalmartCampaignApiWalmartCampaignKeywordsAnalyticsCreate
     */
    readonly data: GetKeywordAnalyticsReq
}

/**
 * Request parameters for walmartCampaignKeywordsListRead operation in WalmartCampaignApi.
 * @export
 * @interface WalmartCampaignApiWalmartCampaignKeywordsListReadRequest
 */
export interface WalmartCampaignApiWalmartCampaignKeywordsListReadRequest {
    /**
     * 
     * @type {string}
     * @memberof WalmartCampaignApiWalmartCampaignKeywordsListRead
     */
    readonly advertiserId: string

    /**
     * 
     * @type {string}
     * @memberof WalmartCampaignApiWalmartCampaignKeywordsListRead
     */
    readonly campaignId: string
}

/**
 * Request parameters for walmartCampaignKeywordsSuggestedRead operation in WalmartCampaignApi.
 * @export
 * @interface WalmartCampaignApiWalmartCampaignKeywordsSuggestedReadRequest
 */
export interface WalmartCampaignApiWalmartCampaignKeywordsSuggestedReadRequest {
    /**
     * 
     * @type {string}
     * @memberof WalmartCampaignApiWalmartCampaignKeywordsSuggestedRead
     */
    readonly advertiserId: string

    /**
     * 
     * @type {string}
     * @memberof WalmartCampaignApiWalmartCampaignKeywordsSuggestedRead
     */
    readonly adGroupId: string
}

/**
 * Request parameters for walmartCampaignKeywordsUpdateUpdate operation in WalmartCampaignApi.
 * @export
 * @interface WalmartCampaignApiWalmartCampaignKeywordsUpdateUpdateRequest
 */
export interface WalmartCampaignApiWalmartCampaignKeywordsUpdateUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof WalmartCampaignApiWalmartCampaignKeywordsUpdateUpdate
     */
    readonly advertiserId: string

    /**
     * 
     * @type {UpdateKeywordReq}
     * @memberof WalmartCampaignApiWalmartCampaignKeywordsUpdateUpdate
     */
    readonly data: UpdateKeywordReq
}

/**
 * Request parameters for walmartCampaignListCreate operation in WalmartCampaignApi.
 * @export
 * @interface WalmartCampaignApiWalmartCampaignListCreateRequest
 */
export interface WalmartCampaignApiWalmartCampaignListCreateRequest {
    /**
     * 
     * @type {CampaignListFilter}
     * @memberof WalmartCampaignApiWalmartCampaignListCreate
     */
    readonly data: CampaignListFilter
}

/**
 * Request parameters for walmartCampaignSponsoredBrandCreate operation in WalmartCampaignApi.
 * @export
 * @interface WalmartCampaignApiWalmartCampaignSponsoredBrandCreateRequest
 */
export interface WalmartCampaignApiWalmartCampaignSponsoredBrandCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof WalmartCampaignApiWalmartCampaignSponsoredBrandCreate
     */
    readonly advertiserId: string

    /**
     * 
     * @type {ListSponsoredBrandRequest}
     * @memberof WalmartCampaignApiWalmartCampaignSponsoredBrandCreate
     */
    readonly data: ListSponsoredBrandRequest
}

/**
 * Request parameters for walmartCampaignSponsoredBrandCreateCreate operation in WalmartCampaignApi.
 * @export
 * @interface WalmartCampaignApiWalmartCampaignSponsoredBrandCreateCreateRequest
 */
export interface WalmartCampaignApiWalmartCampaignSponsoredBrandCreateCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof WalmartCampaignApiWalmartCampaignSponsoredBrandCreateCreate
     */
    readonly advertiserId: string

    /**
     * 
     * @type {Array<CreateSponsoredBrandRequest>}
     * @memberof WalmartCampaignApiWalmartCampaignSponsoredBrandCreateCreate
     */
    readonly data: Array<CreateSponsoredBrandRequest>
}

/**
 * Request parameters for walmartCampaignSponsoredBrandReviewCancelUpdate operation in WalmartCampaignApi.
 * @export
 * @interface WalmartCampaignApiWalmartCampaignSponsoredBrandReviewCancelUpdateRequest
 */
export interface WalmartCampaignApiWalmartCampaignSponsoredBrandReviewCancelUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof WalmartCampaignApiWalmartCampaignSponsoredBrandReviewCancelUpdate
     */
    readonly advertiserId: string

    /**
     * 
     * @type {SPAReviewCancelReq}
     * @memberof WalmartCampaignApiWalmartCampaignSponsoredBrandReviewCancelUpdate
     */
    readonly data: SPAReviewCancelReq
}

/**
 * Request parameters for walmartCampaignSponsoredBrandReviewListRead operation in WalmartCampaignApi.
 * @export
 * @interface WalmartCampaignApiWalmartCampaignSponsoredBrandReviewListReadRequest
 */
export interface WalmartCampaignApiWalmartCampaignSponsoredBrandReviewListReadRequest {
    /**
     * 
     * @type {string}
     * @memberof WalmartCampaignApiWalmartCampaignSponsoredBrandReviewListRead
     */
    readonly advertiserId: string

    /**
     * 
     * @type {string}
     * @memberof WalmartCampaignApiWalmartCampaignSponsoredBrandReviewListRead
     */
    readonly adGroupId: string
}

/**
 * Request parameters for walmartCampaignSponsoredBrandReviewSubmitCreate operation in WalmartCampaignApi.
 * @export
 * @interface WalmartCampaignApiWalmartCampaignSponsoredBrandReviewSubmitCreateRequest
 */
export interface WalmartCampaignApiWalmartCampaignSponsoredBrandReviewSubmitCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof WalmartCampaignApiWalmartCampaignSponsoredBrandReviewSubmitCreate
     */
    readonly advertiserId: string

    /**
     * 
     * @type {SPAReviewSubmitReq}
     * @memberof WalmartCampaignApiWalmartCampaignSponsoredBrandReviewSubmitCreate
     */
    readonly data: SPAReviewSubmitReq
}

/**
 * Request parameters for walmartCampaignSponsoredBrandUpdateUpdate operation in WalmartCampaignApi.
 * @export
 * @interface WalmartCampaignApiWalmartCampaignSponsoredBrandUpdateUpdateRequest
 */
export interface WalmartCampaignApiWalmartCampaignSponsoredBrandUpdateUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof WalmartCampaignApiWalmartCampaignSponsoredBrandUpdateUpdate
     */
    readonly advertiserId: string

    /**
     * 
     * @type {UpdateSponsoredBrandRequest}
     * @memberof WalmartCampaignApiWalmartCampaignSponsoredBrandUpdateUpdate
     */
    readonly data: UpdateSponsoredBrandRequest
}

/**
 * Request parameters for walmartCampaignSponsoredBrandUploadCreate operation in WalmartCampaignApi.
 * @export
 * @interface WalmartCampaignApiWalmartCampaignSponsoredBrandUploadCreateRequest
 */
export interface WalmartCampaignApiWalmartCampaignSponsoredBrandUploadCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof WalmartCampaignApiWalmartCampaignSponsoredBrandUploadCreate
     */
    readonly advertiserId: string

    /**
     * 
     * @type {UploadSponsoredBrandLogoRequest}
     * @memberof WalmartCampaignApiWalmartCampaignSponsoredBrandUploadCreate
     */
    readonly data: UploadSponsoredBrandLogoRequest
}

/**
 * Request parameters for walmartCampaignStatsRead operation in WalmartCampaignApi.
 * @export
 * @interface WalmartCampaignApiWalmartCampaignStatsReadRequest
 */
export interface WalmartCampaignApiWalmartCampaignStatsReadRequest {
    /**
     * 
     * @type {string}
     * @memberof WalmartCampaignApiWalmartCampaignStatsRead
     */
    readonly advertiserId: string

    /**
     * 
     * @type {string}
     * @memberof WalmartCampaignApiWalmartCampaignStatsRead
     */
    readonly campaignId: string
}

/**
 * Request parameters for walmartCampaignSvAdGroupCreateCreate operation in WalmartCampaignApi.
 * @export
 * @interface WalmartCampaignApiWalmartCampaignSvAdGroupCreateCreateRequest
 */
export interface WalmartCampaignApiWalmartCampaignSvAdGroupCreateCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof WalmartCampaignApiWalmartCampaignSvAdGroupCreateCreate
     */
    readonly advertiserId: string

    /**
     * 
     * @type {Array<CreateSVAdGroupArgs>}
     * @memberof WalmartCampaignApiWalmartCampaignSvAdGroupCreateCreate
     */
    readonly data: Array<CreateSVAdGroupArgs>
}

/**
 * Request parameters for walmartCampaignSvAdGroupListCreate operation in WalmartCampaignApi.
 * @export
 * @interface WalmartCampaignApiWalmartCampaignSvAdGroupListCreateRequest
 */
export interface WalmartCampaignApiWalmartCampaignSvAdGroupListCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof WalmartCampaignApiWalmartCampaignSvAdGroupListCreate
     */
    readonly advertiserId: string

    /**
     * 
     * @type {ListSVAdGroupArgs}
     * @memberof WalmartCampaignApiWalmartCampaignSvAdGroupListCreate
     */
    readonly data: ListSVAdGroupArgs
}

/**
 * Request parameters for walmartCampaignSvAdGroupUpdateUpdate operation in WalmartCampaignApi.
 * @export
 * @interface WalmartCampaignApiWalmartCampaignSvAdGroupUpdateUpdateRequest
 */
export interface WalmartCampaignApiWalmartCampaignSvAdGroupUpdateUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof WalmartCampaignApiWalmartCampaignSvAdGroupUpdateUpdate
     */
    readonly advertiserId: string

    /**
     * 
     * @type {Array<UpdateSVAdGroupArgs>}
     * @memberof WalmartCampaignApiWalmartCampaignSvAdGroupUpdateUpdate
     */
    readonly data: Array<UpdateSVAdGroupArgs>
}

/**
 * Request parameters for walmartCampaignUpdateUpdate operation in WalmartCampaignApi.
 * @export
 * @interface WalmartCampaignApiWalmartCampaignUpdateUpdateRequest
 */
export interface WalmartCampaignApiWalmartCampaignUpdateUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof WalmartCampaignApiWalmartCampaignUpdateUpdate
     */
    readonly advertiserId: string

    /**
     * 
     * @type {UpdateCampaignReq}
     * @memberof WalmartCampaignApiWalmartCampaignUpdateUpdate
     */
    readonly data: UpdateCampaignReq
}

/**
 * Request parameters for walmartCampaignVideoManagementCompleteCreate operation in WalmartCampaignApi.
 * @export
 * @interface WalmartCampaignApiWalmartCampaignVideoManagementCompleteCreateRequest
 */
export interface WalmartCampaignApiWalmartCampaignVideoManagementCompleteCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof WalmartCampaignApiWalmartCampaignVideoManagementCompleteCreate
     */
    readonly advertiserId: string

    /**
     * 
     * @type {UploadCompleteReq}
     * @memberof WalmartCampaignApiWalmartCampaignVideoManagementCompleteCreate
     */
    readonly data: UploadCompleteReq
}

/**
 * Request parameters for walmartCampaignVideoManagementCreate operation in WalmartCampaignApi.
 * @export
 * @interface WalmartCampaignApiWalmartCampaignVideoManagementCreateRequest
 */
export interface WalmartCampaignApiWalmartCampaignVideoManagementCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof WalmartCampaignApiWalmartCampaignVideoManagementCreate
     */
    readonly advertiserId: string
}

/**
 * Request parameters for walmartCampaignVideoManagementDeleteCreate operation in WalmartCampaignApi.
 * @export
 * @interface WalmartCampaignApiWalmartCampaignVideoManagementDeleteCreateRequest
 */
export interface WalmartCampaignApiWalmartCampaignVideoManagementDeleteCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof WalmartCampaignApiWalmartCampaignVideoManagementDeleteCreate
     */
    readonly advertiserId: string

    /**
     * 
     * @type {MediaDeleteReq}
     * @memberof WalmartCampaignApiWalmartCampaignVideoManagementDeleteCreate
     */
    readonly data: MediaDeleteReq
}

/**
 * Request parameters for walmartCampaignVideoManagementListCreate operation in WalmartCampaignApi.
 * @export
 * @interface WalmartCampaignApiWalmartCampaignVideoManagementListCreateRequest
 */
export interface WalmartCampaignApiWalmartCampaignVideoManagementListCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof WalmartCampaignApiWalmartCampaignVideoManagementListCreate
     */
    readonly advertiserId: string

    /**
     * 
     * @type {GetMediaReq}
     * @memberof WalmartCampaignApiWalmartCampaignVideoManagementListCreate
     */
    readonly data: GetMediaReq
}

/**
 * Request parameters for walmartCampaignVideoManagementUpdateCaptionCreate operation in WalmartCampaignApi.
 * @export
 * @interface WalmartCampaignApiWalmartCampaignVideoManagementUpdateCaptionCreateRequest
 */
export interface WalmartCampaignApiWalmartCampaignVideoManagementUpdateCaptionCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof WalmartCampaignApiWalmartCampaignVideoManagementUpdateCaptionCreate
     */
    readonly advertiserId: string

    /**
     * 
     * @type {UpdateCaptionReq}
     * @memberof WalmartCampaignApiWalmartCampaignVideoManagementUpdateCaptionCreate
     */
    readonly data: UpdateCaptionReq
}

/**
 * Request parameters for walmartCampaignVideoManagementUpdateCreate operation in WalmartCampaignApi.
 * @export
 * @interface WalmartCampaignApiWalmartCampaignVideoManagementUpdateCreateRequest
 */
export interface WalmartCampaignApiWalmartCampaignVideoManagementUpdateCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof WalmartCampaignApiWalmartCampaignVideoManagementUpdateCreate
     */
    readonly advertiserId: string

    /**
     * 
     * @type {UpdateMediaReq}
     * @memberof WalmartCampaignApiWalmartCampaignVideoManagementUpdateCreate
     */
    readonly data: UpdateMediaReq
}

/**
 * Request parameters for walmartCampaignVideoManagementUploadCreate operation in WalmartCampaignApi.
 * @export
 * @interface WalmartCampaignApiWalmartCampaignVideoManagementUploadCreateRequest
 */
export interface WalmartCampaignApiWalmartCampaignVideoManagementUploadCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof WalmartCampaignApiWalmartCampaignVideoManagementUploadCreate
     */
    readonly advertiserId: string

    /**
     * 
     * @type {VideoUploadReq}
     * @memberof WalmartCampaignApiWalmartCampaignVideoManagementUploadCreate
     */
    readonly data: VideoUploadReq
}

/**
 * WalmartCampaignApi - object-oriented interface
 * @export
 * @class WalmartCampaignApi
 * @extends {BaseAPI}
 */
export class WalmartCampaignApi extends BaseAPI {
    /**
     * 
     * @param {WalmartCampaignApiWalmartCampaignAdGroupCreateCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalmartCampaignApi
     */
    public walmartCampaignAdGroupCreateCreate(requestParameters: WalmartCampaignApiWalmartCampaignAdGroupCreateCreateRequest, options?: AxiosRequestConfig) {
        return WalmartCampaignApiFp(this.configuration).walmartCampaignAdGroupCreateCreate(requestParameters.advertiserId, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WalmartCampaignApiWalmartCampaignAdGroupListCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalmartCampaignApi
     */
    public walmartCampaignAdGroupListCreate(requestParameters: WalmartCampaignApiWalmartCampaignAdGroupListCreateRequest, options?: AxiosRequestConfig) {
        return WalmartCampaignApiFp(this.configuration).walmartCampaignAdGroupListCreate(requestParameters.advertiserId, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WalmartCampaignApiWalmartCampaignAdGroupUpdateUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalmartCampaignApi
     */
    public walmartCampaignAdGroupUpdateUpdate(requestParameters: WalmartCampaignApiWalmartCampaignAdGroupUpdateUpdateRequest, options?: AxiosRequestConfig) {
        return WalmartCampaignApiFp(this.configuration).walmartCampaignAdGroupUpdateUpdate(requestParameters.advertiserId, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WalmartCampaignApiWalmartCampaignAdItemAddCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalmartCampaignApi
     */
    public walmartCampaignAdItemAddCreate(requestParameters: WalmartCampaignApiWalmartCampaignAdItemAddCreateRequest, options?: AxiosRequestConfig) {
        return WalmartCampaignApiFp(this.configuration).walmartCampaignAdItemAddCreate(requestParameters.advertiserId, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WalmartCampaignApiWalmartCampaignAdItemListReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalmartCampaignApi
     */
    public walmartCampaignAdItemListRead(requestParameters: WalmartCampaignApiWalmartCampaignAdItemListReadRequest, options?: AxiosRequestConfig) {
        return WalmartCampaignApiFp(this.configuration).walmartCampaignAdItemListRead(requestParameters.advertiserId, requestParameters.campaignId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WalmartCampaignApiWalmartCampaignAdItemUpdateUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalmartCampaignApi
     */
    public walmartCampaignAdItemUpdateUpdate(requestParameters: WalmartCampaignApiWalmartCampaignAdItemUpdateUpdateRequest, options?: AxiosRequestConfig) {
        return WalmartCampaignApiFp(this.configuration).walmartCampaignAdItemUpdateUpdate(requestParameters.advertiserId, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WalmartCampaignApiWalmartCampaignAdPlacementListCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalmartCampaignApi
     */
    public walmartCampaignAdPlacementListCreate(requestParameters: WalmartCampaignApiWalmartCampaignAdPlacementListCreateRequest, options?: AxiosRequestConfig) {
        return WalmartCampaignApiFp(this.configuration).walmartCampaignAdPlacementListCreate(requestParameters.advertiserId, requestParameters.campaignId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WalmartCampaignApiWalmartCampaignAdPlacementUpdateUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalmartCampaignApi
     */
    public walmartCampaignAdPlacementUpdateUpdate(requestParameters: WalmartCampaignApiWalmartCampaignAdPlacementUpdateUpdateRequest, options?: AxiosRequestConfig) {
        return WalmartCampaignApiFp(this.configuration).walmartCampaignAdPlacementUpdateUpdate(requestParameters.advertiserId, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WalmartCampaignApiWalmartCampaignBidCreateCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalmartCampaignApi
     */
    public walmartCampaignBidCreateCreate(requestParameters: WalmartCampaignApiWalmartCampaignBidCreateCreateRequest, options?: AxiosRequestConfig) {
        return WalmartCampaignApiFp(this.configuration).walmartCampaignBidCreateCreate(requestParameters.advertiserId, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WalmartCampaignApiWalmartCampaignBidListReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalmartCampaignApi
     */
    public walmartCampaignBidListRead(requestParameters: WalmartCampaignApiWalmartCampaignBidListReadRequest, options?: AxiosRequestConfig) {
        return WalmartCampaignApiFp(this.configuration).walmartCampaignBidListRead(requestParameters.advertiserId, requestParameters.campaignId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WalmartCampaignApiWalmartCampaignBidPlatformCreateCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalmartCampaignApi
     */
    public walmartCampaignBidPlatformCreateCreate(requestParameters: WalmartCampaignApiWalmartCampaignBidPlatformCreateCreateRequest, options?: AxiosRequestConfig) {
        return WalmartCampaignApiFp(this.configuration).walmartCampaignBidPlatformCreateCreate(requestParameters.advertiserId, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WalmartCampaignApiWalmartCampaignBidPlatformListReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalmartCampaignApi
     */
    public walmartCampaignBidPlatformListRead(requestParameters: WalmartCampaignApiWalmartCampaignBidPlatformListReadRequest, options?: AxiosRequestConfig) {
        return WalmartCampaignApiFp(this.configuration).walmartCampaignBidPlatformListRead(requestParameters.advertiserId, requestParameters.campaignId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WalmartCampaignApiWalmartCampaignBidPlatformUpdateUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalmartCampaignApi
     */
    public walmartCampaignBidPlatformUpdateUpdate(requestParameters: WalmartCampaignApiWalmartCampaignBidPlatformUpdateUpdateRequest, options?: AxiosRequestConfig) {
        return WalmartCampaignApiFp(this.configuration).walmartCampaignBidPlatformUpdateUpdate(requestParameters.advertiserId, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WalmartCampaignApiWalmartCampaignBidUpdateUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalmartCampaignApi
     */
    public walmartCampaignBidUpdateUpdate(requestParameters: WalmartCampaignApiWalmartCampaignBidUpdateUpdateRequest, options?: AxiosRequestConfig) {
        return WalmartCampaignApiFp(this.configuration).walmartCampaignBidUpdateUpdate(requestParameters.advertiserId, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WalmartCampaignApiWalmartCampaignCreateCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalmartCampaignApi
     */
    public walmartCampaignCreateCreate(requestParameters: WalmartCampaignApiWalmartCampaignCreateCreateRequest, options?: AxiosRequestConfig) {
        return WalmartCampaignApiFp(this.configuration).walmartCampaignCreateCreate(requestParameters.advertiserId, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WalmartCampaignApiWalmartCampaignDeleteUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalmartCampaignApi
     */
    public walmartCampaignDeleteUpdate(requestParameters: WalmartCampaignApiWalmartCampaignDeleteUpdateRequest, options?: AxiosRequestConfig) {
        return WalmartCampaignApiFp(this.configuration).walmartCampaignDeleteUpdate(requestParameters.advertiserId, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WalmartCampaignApiWalmartCampaignItemsSearchReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalmartCampaignApi
     */
    public walmartCampaignItemsSearchRead(requestParameters: WalmartCampaignApiWalmartCampaignItemsSearchReadRequest, options?: AxiosRequestConfig) {
        return WalmartCampaignApiFp(this.configuration).walmartCampaignItemsSearchRead(requestParameters.advertiserId, requestParameters.searchText, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WalmartCampaignApiWalmartCampaignKeywordsAddCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalmartCampaignApi
     */
    public walmartCampaignKeywordsAddCreate(requestParameters: WalmartCampaignApiWalmartCampaignKeywordsAddCreateRequest, options?: AxiosRequestConfig) {
        return WalmartCampaignApiFp(this.configuration).walmartCampaignKeywordsAddCreate(requestParameters.advertiserId, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WalmartCampaignApiWalmartCampaignKeywordsAnalyticsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalmartCampaignApi
     */
    public walmartCampaignKeywordsAnalyticsCreate(requestParameters: WalmartCampaignApiWalmartCampaignKeywordsAnalyticsCreateRequest, options?: AxiosRequestConfig) {
        return WalmartCampaignApiFp(this.configuration).walmartCampaignKeywordsAnalyticsCreate(requestParameters.advertiserId, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WalmartCampaignApiWalmartCampaignKeywordsListReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalmartCampaignApi
     */
    public walmartCampaignKeywordsListRead(requestParameters: WalmartCampaignApiWalmartCampaignKeywordsListReadRequest, options?: AxiosRequestConfig) {
        return WalmartCampaignApiFp(this.configuration).walmartCampaignKeywordsListRead(requestParameters.advertiserId, requestParameters.campaignId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WalmartCampaignApiWalmartCampaignKeywordsSuggestedReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalmartCampaignApi
     */
    public walmartCampaignKeywordsSuggestedRead(requestParameters: WalmartCampaignApiWalmartCampaignKeywordsSuggestedReadRequest, options?: AxiosRequestConfig) {
        return WalmartCampaignApiFp(this.configuration).walmartCampaignKeywordsSuggestedRead(requestParameters.advertiserId, requestParameters.adGroupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WalmartCampaignApiWalmartCampaignKeywordsUpdateUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalmartCampaignApi
     */
    public walmartCampaignKeywordsUpdateUpdate(requestParameters: WalmartCampaignApiWalmartCampaignKeywordsUpdateUpdateRequest, options?: AxiosRequestConfig) {
        return WalmartCampaignApiFp(this.configuration).walmartCampaignKeywordsUpdateUpdate(requestParameters.advertiserId, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WalmartCampaignApiWalmartCampaignListCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalmartCampaignApi
     */
    public walmartCampaignListCreate(requestParameters: WalmartCampaignApiWalmartCampaignListCreateRequest, options?: AxiosRequestConfig) {
        return WalmartCampaignApiFp(this.configuration).walmartCampaignListCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WalmartCampaignApiWalmartCampaignSponsoredBrandCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalmartCampaignApi
     */
    public walmartCampaignSponsoredBrandCreate(requestParameters: WalmartCampaignApiWalmartCampaignSponsoredBrandCreateRequest, options?: AxiosRequestConfig) {
        return WalmartCampaignApiFp(this.configuration).walmartCampaignSponsoredBrandCreate(requestParameters.advertiserId, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WalmartCampaignApiWalmartCampaignSponsoredBrandCreateCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalmartCampaignApi
     */
    public walmartCampaignSponsoredBrandCreateCreate(requestParameters: WalmartCampaignApiWalmartCampaignSponsoredBrandCreateCreateRequest, options?: AxiosRequestConfig) {
        return WalmartCampaignApiFp(this.configuration).walmartCampaignSponsoredBrandCreateCreate(requestParameters.advertiserId, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WalmartCampaignApiWalmartCampaignSponsoredBrandReviewCancelUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalmartCampaignApi
     */
    public walmartCampaignSponsoredBrandReviewCancelUpdate(requestParameters: WalmartCampaignApiWalmartCampaignSponsoredBrandReviewCancelUpdateRequest, options?: AxiosRequestConfig) {
        return WalmartCampaignApiFp(this.configuration).walmartCampaignSponsoredBrandReviewCancelUpdate(requestParameters.advertiserId, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WalmartCampaignApiWalmartCampaignSponsoredBrandReviewListReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalmartCampaignApi
     */
    public walmartCampaignSponsoredBrandReviewListRead(requestParameters: WalmartCampaignApiWalmartCampaignSponsoredBrandReviewListReadRequest, options?: AxiosRequestConfig) {
        return WalmartCampaignApiFp(this.configuration).walmartCampaignSponsoredBrandReviewListRead(requestParameters.advertiserId, requestParameters.adGroupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WalmartCampaignApiWalmartCampaignSponsoredBrandReviewSubmitCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalmartCampaignApi
     */
    public walmartCampaignSponsoredBrandReviewSubmitCreate(requestParameters: WalmartCampaignApiWalmartCampaignSponsoredBrandReviewSubmitCreateRequest, options?: AxiosRequestConfig) {
        return WalmartCampaignApiFp(this.configuration).walmartCampaignSponsoredBrandReviewSubmitCreate(requestParameters.advertiserId, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WalmartCampaignApiWalmartCampaignSponsoredBrandUpdateUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalmartCampaignApi
     */
    public walmartCampaignSponsoredBrandUpdateUpdate(requestParameters: WalmartCampaignApiWalmartCampaignSponsoredBrandUpdateUpdateRequest, options?: AxiosRequestConfig) {
        return WalmartCampaignApiFp(this.configuration).walmartCampaignSponsoredBrandUpdateUpdate(requestParameters.advertiserId, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WalmartCampaignApiWalmartCampaignSponsoredBrandUploadCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalmartCampaignApi
     */
    public walmartCampaignSponsoredBrandUploadCreate(requestParameters: WalmartCampaignApiWalmartCampaignSponsoredBrandUploadCreateRequest, options?: AxiosRequestConfig) {
        return WalmartCampaignApiFp(this.configuration).walmartCampaignSponsoredBrandUploadCreate(requestParameters.advertiserId, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WalmartCampaignApiWalmartCampaignStatsReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalmartCampaignApi
     */
    public walmartCampaignStatsRead(requestParameters: WalmartCampaignApiWalmartCampaignStatsReadRequest, options?: AxiosRequestConfig) {
        return WalmartCampaignApiFp(this.configuration).walmartCampaignStatsRead(requestParameters.advertiserId, requestParameters.campaignId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WalmartCampaignApiWalmartCampaignSvAdGroupCreateCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalmartCampaignApi
     */
    public walmartCampaignSvAdGroupCreateCreate(requestParameters: WalmartCampaignApiWalmartCampaignSvAdGroupCreateCreateRequest, options?: AxiosRequestConfig) {
        return WalmartCampaignApiFp(this.configuration).walmartCampaignSvAdGroupCreateCreate(requestParameters.advertiserId, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WalmartCampaignApiWalmartCampaignSvAdGroupListCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalmartCampaignApi
     */
    public walmartCampaignSvAdGroupListCreate(requestParameters: WalmartCampaignApiWalmartCampaignSvAdGroupListCreateRequest, options?: AxiosRequestConfig) {
        return WalmartCampaignApiFp(this.configuration).walmartCampaignSvAdGroupListCreate(requestParameters.advertiserId, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WalmartCampaignApiWalmartCampaignSvAdGroupUpdateUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalmartCampaignApi
     */
    public walmartCampaignSvAdGroupUpdateUpdate(requestParameters: WalmartCampaignApiWalmartCampaignSvAdGroupUpdateUpdateRequest, options?: AxiosRequestConfig) {
        return WalmartCampaignApiFp(this.configuration).walmartCampaignSvAdGroupUpdateUpdate(requestParameters.advertiserId, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WalmartCampaignApiWalmartCampaignUpdateUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalmartCampaignApi
     */
    public walmartCampaignUpdateUpdate(requestParameters: WalmartCampaignApiWalmartCampaignUpdateUpdateRequest, options?: AxiosRequestConfig) {
        return WalmartCampaignApiFp(this.configuration).walmartCampaignUpdateUpdate(requestParameters.advertiserId, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WalmartCampaignApiWalmartCampaignVideoManagementCompleteCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalmartCampaignApi
     */
    public walmartCampaignVideoManagementCompleteCreate(requestParameters: WalmartCampaignApiWalmartCampaignVideoManagementCompleteCreateRequest, options?: AxiosRequestConfig) {
        return WalmartCampaignApiFp(this.configuration).walmartCampaignVideoManagementCompleteCreate(requestParameters.advertiserId, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WalmartCampaignApiWalmartCampaignVideoManagementCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalmartCampaignApi
     */
    public walmartCampaignVideoManagementCreate(requestParameters: WalmartCampaignApiWalmartCampaignVideoManagementCreateRequest, options?: AxiosRequestConfig) {
        return WalmartCampaignApiFp(this.configuration).walmartCampaignVideoManagementCreate(requestParameters.advertiserId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WalmartCampaignApiWalmartCampaignVideoManagementDeleteCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalmartCampaignApi
     */
    public walmartCampaignVideoManagementDeleteCreate(requestParameters: WalmartCampaignApiWalmartCampaignVideoManagementDeleteCreateRequest, options?: AxiosRequestConfig) {
        return WalmartCampaignApiFp(this.configuration).walmartCampaignVideoManagementDeleteCreate(requestParameters.advertiserId, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WalmartCampaignApiWalmartCampaignVideoManagementListCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalmartCampaignApi
     */
    public walmartCampaignVideoManagementListCreate(requestParameters: WalmartCampaignApiWalmartCampaignVideoManagementListCreateRequest, options?: AxiosRequestConfig) {
        return WalmartCampaignApiFp(this.configuration).walmartCampaignVideoManagementListCreate(requestParameters.advertiserId, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WalmartCampaignApiWalmartCampaignVideoManagementUpdateCaptionCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalmartCampaignApi
     */
    public walmartCampaignVideoManagementUpdateCaptionCreate(requestParameters: WalmartCampaignApiWalmartCampaignVideoManagementUpdateCaptionCreateRequest, options?: AxiosRequestConfig) {
        return WalmartCampaignApiFp(this.configuration).walmartCampaignVideoManagementUpdateCaptionCreate(requestParameters.advertiserId, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WalmartCampaignApiWalmartCampaignVideoManagementUpdateCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalmartCampaignApi
     */
    public walmartCampaignVideoManagementUpdateCreate(requestParameters: WalmartCampaignApiWalmartCampaignVideoManagementUpdateCreateRequest, options?: AxiosRequestConfig) {
        return WalmartCampaignApiFp(this.configuration).walmartCampaignVideoManagementUpdateCreate(requestParameters.advertiserId, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WalmartCampaignApiWalmartCampaignVideoManagementUploadCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalmartCampaignApi
     */
    public walmartCampaignVideoManagementUploadCreate(requestParameters: WalmartCampaignApiWalmartCampaignVideoManagementUploadCreateRequest, options?: AxiosRequestConfig) {
        return WalmartCampaignApiFp(this.configuration).walmartCampaignVideoManagementUploadCreate(requestParameters.advertiserId, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }
}



